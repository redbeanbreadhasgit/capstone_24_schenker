[{"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\index.js":"1","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\App.js":"2","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\reportWebVitals.js":"3","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\sign-in\\SignIn.js":"4","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList\\Dashboard-applicantList.js":"5","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList\\Filter.js":"6","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-homepage\\Dashboard-homepage.js":"7","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-createJobMatching\\Dashboard-createJobMatching.js":"8","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList\\ApplicantList.js":"9","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\sign-up\\SignUp.js":"10","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList\\Dashboard-jobList.js":"11","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList\\JobList.js":"12","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\routes\\invoices.jsx":"13","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\routes\\expenses.jsx":"14","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\routes\\data.js":"15","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\routes\\invoice.jsx":"16","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\components\\listItems.js":"17","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\components\\icons.js":"18","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\components\\Title.js":"19","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList-detailed\\Dashboard-applicantList-detailed.js":"20","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList-detailed\\GetApplicantInfo.js":"21","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\json\\jsonUtil.js":"22","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList-detailed\\Dashboard-jobList-detailed.js":"23","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList-detailed\\ReturnApplicantsInfo.js":"24","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList-detailed\\ReturnJobInfo.js":"25","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\jsonver3\\jsonUtil.js":"26","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\themes\\mianTheme.js":"27","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\styles\\mainStyle.js":"28","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\styles\\tableStyle.js":"29","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\components\\enhancedTable.js":"30"},{"size":2822,"mtime":1656677976686,"results":"31","hashOfConfig":"32"},{"size":2656,"mtime":1656677813616,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":1653569155404,"results":"34","hashOfConfig":"32"},{"size":3530,"mtime":1657250516871,"results":"35","hashOfConfig":"32"},{"size":3304,"mtime":1657669843758,"results":"36","hashOfConfig":"32"},{"size":3256,"mtime":1655477748344,"results":"37","hashOfConfig":"32"},{"size":6059,"mtime":1657670759239,"results":"38","hashOfConfig":"32"},{"size":5743,"mtime":1657670623959,"results":"39","hashOfConfig":"32"},{"size":8568,"mtime":1657853883281,"results":"40","hashOfConfig":"32"},{"size":4435,"mtime":1657250516872,"results":"41","hashOfConfig":"32"},{"size":3405,"mtime":1657847485692,"results":"42","hashOfConfig":"32"},{"size":6806,"mtime":1657850610227,"results":"43","hashOfConfig":"32"},{"size":972,"mtime":1655470570507,"results":"44","hashOfConfig":"32"},{"size":227,"mtime":1655424268127,"results":"45","hashOfConfig":"32"},{"size":797,"mtime":1655468850491,"results":"46","hashOfConfig":"32"},{"size":549,"mtime":1655469005377,"results":"47","hashOfConfig":"32"},{"size":2369,"mtime":1655728899136,"results":"48","hashOfConfig":"32"},{"size":601,"mtime":1656684429556,"results":"49","hashOfConfig":"32"},{"size":343,"mtime":1650609016000,"results":"50","hashOfConfig":"32"},{"size":4524,"mtime":1657855641719,"results":"51","hashOfConfig":"32"},{"size":12420,"mtime":1657855776974,"results":"52","hashOfConfig":"32"},{"size":3073,"mtime":1656783034725,"results":"53","hashOfConfig":"32"},{"size":4066,"mtime":1657670314096,"results":"54","hashOfConfig":"32"},{"size":2921,"mtime":1657235576230,"results":"55","hashOfConfig":"32"},{"size":3506,"mtime":1657235620101,"results":"56","hashOfConfig":"32"},{"size":4626,"mtime":1657849646251,"results":"57","hashOfConfig":"32"},{"size":175,"mtime":1657667817675,"results":"58","hashOfConfig":"32"},{"size":2266,"mtime":1657669236626,"results":"59","hashOfConfig":"32"},{"size":505,"mtime":1657839720369,"results":"60","hashOfConfig":"32"},{"size":7055,"mtime":1657843775116,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},"1bt48m0",{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"66"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"66"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\index.js",["176","177","178","179","180","181","182","183","184"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Route, Routes,  } from 'react-router-dom';\n\nimport Expenses from \"./routes/expenses\";\nimport Invoices from \"./routes/invoices\";\nimport Invoice from \"./routes/invoice\"\nimport Dashboard_homepage from './pages/dashboard-homepage/Dashboard-homepage'\nimport DashBoard_createJobMatching from './pages/dashboard-createJobMatching/Dashboard-createJobMatching'\nimport DashBoard_applicantList from './pages/dashboard-applicantList/Dashboard-applicantList'\nimport Dashboard_jobList from './pages/dashboard-jobList/Dashboard-jobList'\nimport SignIn from './pages/sign-in/SignIn'\nimport SignUp from './pages/sign-up/SignUp'\nimport DashBoard_applicantList_detailed from './pages/dashboard-applicantList-detailed/Dashboard-applicantList-detailed';\nimport DashBoard_jobList_detailed from './pages/dashboard-jobList-detailed/Dashboard-jobList-detailed';\n\n// import 'fontsource-roboto';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n\n  <BrowserRouter>\n    {/* test */}\n    {/* <Routes>\n    <Route path=\"/\" element={<App />} >\n      <Route path=\"/invoices\" element={<Invoices />}>\n      <Route\n        index\n        element={\n          <main style={{ padding: \"1rem\" }}>\n            <p>Select an invoice</p>\n          </main>\n        }\n        />\n        <Route path=\":invoiceId\" element={<Invoice />} />\n      </Route> \n      <Route path=\"expenses\" element={<Expenses />} />\n      <Route\n      path=\"*\"\n      element={\n        <main style={{ padding: \"1rem\" }}>\n          <p>There's nothing here!</p>\n        </main>\n      }\n      />\n    </Route>\n    </Routes> */}\n\n    <Routes>\n      <Route path=\"/\" element={<App />} />\n      <Route path=\"homepage\" element={<Dashboard_homepage />} />\n      <Route path=\"createJobMatching\" element={<DashBoard_createJobMatching/>} />\n      <Route path=\"applicantList\" element={<DashBoard_applicantList/>}></Route>\n      <Route path=\"applicantList:applicantID\" element={<DashBoard_applicantList_detailed/>}/>\n      <Route path=\"jobList\" element={<Dashboard_jobList/>}/>\n      <Route path=\"jobList:jobID\" element={<DashBoard_jobList_detailed/>}/>\n      <Route path=\"signIn\" element={<SignIn/>}/>\n      <Route path=\"signUp\" element={<SignUp/>}/>     \n      \n      {/* <Route path=\"test\" element={<DashBoard_applicantList_detailed/>}/>  */}\n\n    </Routes>\n\n    \n\n    \n  </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\App.js",["185","186","187","188","189","190","191","192","193"],[],"import logo from './logo.svg';\nimport './App.css';\nimport SignIn from './pages/sign-in/SignIn.js'\nimport DashBoard_applicantList from './pages/dashboard-applicantList/Dashboard-applicantList'\nimport DashBoard_homepage from './pages/dashboard-homepage/Dashboard-homepage'\nimport DashBoard_createJobMatching from './pages/dashboard-createJobMatching/Dashboard-createJobMatching'\nimport Signup from \"./pages/sign-up/SignUp.js\"\nimport Dashboard_jobList from \"./pages/dashboard-jobList/Dashboard-jobList.js\"\nimport DashBoard_applicantList_detailed from './pages/dashboard-applicantList-detailed/Dashboard-applicantList-detailed';\nimport { Link, Outlet } from 'react-router-dom';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React from 'react';\n// //import ReactDOM from 'react-dom';\n// import Button from '@material-ui/core/Button';\n// // font\n// //import 'fontsource-roboto';\n\n// function App() {\n//   return (\n//     <p>\n//       <p color=\"primary\">\n//       hi Capstone\n//       </p>\n//       <h1 color=\"primary\">\n//       hi Capstone\n//       </h1>\n//       <h2 color=\"primary\">\n//       hi Capstone\n//       </h2>\n\n//       <Button variant=\"contained\" color=\"primary\">\n//       hi Capstone\n//       </Button>\n//     </p>\n    \n//   );\n// }\n\n// // ReactDOM.render(<App />, document.querySelector('#app'));\n// export default App;\n\nfunction App() {\n  return (\n    <SignIn>\n    </SignIn>\n    // <DashBoard_applicantList>\n    // </DashBoard_applicantList>\n    // <DashBoard_homepage>\n    // </DashBoard_homepage> \n    // <DashBoard_createJobMatching>\n    // </DashBoard_createJobMatching>\n    // <Signup></Signup>\n    // <Dashboard_jobList></Dashboard_jobList>\n    // <DashBoard_applicantList_detailed></DashBoard_applicantList_detailed>\n\n\n    // test\n    // <div>\n    //   <h1>Bookkeeper</h1>\n    //   <nav\n    //     style={{\n    //       borderBottom: \"solid 1px\",\n    //       paddingBottom: \"1rem\",\n    //     }}\n    //   >\n    //     <Link to=\"/invoices\">Invoices</Link> |{\" \"}\n    //     <Link to=\"/expenses\">Expenses</Link> |{\" \"}\n    //     <Link to=\"/\">Home</Link>\n    //     <Outlet />\n    //   </nav>\n    // </div>\n\n  );\n}\n\nexport default App;\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\reportWebVitals.js",[],[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\sign-in\\SignIn.js",["194"],[],"import * as React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport {Link as routerLink} from 'react-router-dom';\r\n\r\nfunction Copyright(props) {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n      {' '}\r\n      <Link color=\"inherit\" href=\"https://mui.com/\">\r\n        Capstone Team 24\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function SignIn() {\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.currentTarget);\r\n    console.log({\r\n      email: data.get('email'),\r\n      password: data.get('password'),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }} method=\"POST\">\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              autoComplete=\"username\"\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember Me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              Sign In\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link variant=\"body2\" component={routerLink} to=\"\">\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link variant=\"body2\"  component={routerLink} to=\"/signup\">\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        {/* <Copyright sx={{ mt: 8, mb: 4 }} /> */}\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList\\Dashboard-applicantList.js",["195","196","197","198","199","200"],[],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { mainListItems, secondaryListItems } from '../components/listItems';\n\nimport ApplicantList from './ApplicantList';\nimport Filter from './Filter';\n\nimport {mainTheme} from \"../themes/mianTheme\";\nimport {mainStyle} from \"../styles/mainStyle\"\n\n\nexport default function DashBoard_applicantList() {\n  const classes = mainStyle();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <ThemeProvider theme={mainTheme}>\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            All Applicants\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      </ThemeProvider>\n\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        <List>{secondaryListItems}</List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <ApplicantList />\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n    </div>\n  );\n}\n",[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList\\Filter.js",["201","202","203","204","205","206"],[],"import React from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from '../components/Title';\r\nimport { Subtitles } from '@material-ui/icons';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// filter stuffs import\r\nimport { Radio, FormControl, FormLabel, FormControlLabel, RadioGroup, } from '@material-ui/core';\r\n\r\n\r\n// Generate Order Data\r\nfunction createData(id, title, e1, e2, e3, e4, e5, e6) {\r\n  return { id, title, e1, e2, e3, e4, e5, e6 };\r\n}\r\n\r\nconst rows = [\r\n  createData(0, 'Exprience:', '< 1 year', '1 ~ 3 years', '3 ~ 5 years', '5 ~ 10 years', '> 10 years', ''),\r\n  createData(1, 'Skills:', 'Java', 'C#', 'C++', 'Python', 'C', 'Other'),\r\n  createData(2, 'Educational Level:', 'Secondary', 'College', 'University', 'PhD', 'Other', '' ),\r\n//   createData(3, '16 Mar, 2022', 'Michael Jackson', '99%', 'Java Engineer', 'pending', 654.39),\r\n//   createData(4, '15 Mar, 2022', 'Bruce Springsteen', '120%', 'Accountant', 'pending', 212.79),\r\n];\r\n\r\nfunction preventDefault(event) {\r\n  event.preventDefault();\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function Filter() {\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Applicant Filter</Title>\r\n      <Typography component=\"p\" variant=\"h10\">\r\n        Click to filter\r\n      </Typography>\r\n\r\n      {/* <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Gender</FormLabel>\r\n        <RadioGroup aria-label=\"gender\" name=\"gender1\" value={value} onChange={handleChange}>\r\n          <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n          <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n          <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\r\n          <FormControlLabel value=\"disabled\" disabled control={<Radio />} label=\"(Disabled option)\" />\r\n        </RadioGroup>\r\n      </FormControl> */}\r\n\r\n      {/* older version */}\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n        \r\n            \r\n            \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.id}>\r\n              <TableCell>{row.title}</TableCell> \r\n              <TableCell>{row.e1}</TableCell>\r\n              <TableCell>{row.e2}</TableCell>\r\n              <TableCell>{row.e3}</TableCell>\r\n              <TableCell>{row.e4}</TableCell>\r\n              <TableCell>{row.e5}</TableCell>\r\n              <TableCell>{row.e6}</TableCell>\r\n              <TableCell align=\"right\">{row.selected}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      \r\n      <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n          See more\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-homepage\\Dashboard-homepage.js",["207","208","209","210","211","212","213"],[],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { mainListItems, secondaryListItems,  } from '../components/listItems';\nimport { applicantIcon, jobIcon, jobmatchingIcon } from '../components/icons';\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport { createTheme } from '@material-ui/core';\nimport {mainTheme} from \"../themes/mianTheme\"\nimport {mainStyle} from \"../styles/mainStyle\"\n\nexport default function DashBoard_homepage() {\n  const classes = mainStyle();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <ThemeProvider theme={mainTheme}>\n        <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Homepage\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      </ThemeProvider>\n      \n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        <List>{secondaryListItems}</List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={10}>\n            {/* number of applicants */}\n            {/* <Paper className={fixedHeightPaper}> */}\n            <Grid container item xs={12} md={12} lg={12} space={10}>          \n              {/* <Paper className={classes.paper}> */}\n              <Grid item xs={12} md={3} lg={3}>\n                {jobIcon}\n              </Grid>\n              <Grid item xs={12} md={3} lg={3}>\n                <Typography variant='h6'> Number of Open Jobs : </Typography>\n                <Typography variant='h1'> 7 </Typography>\n              </Grid>  \n                  \n              <Grid item xs={6} md={3} lg={3}>\n                <Button variant=\"contained\" color=\"primary\">View jobs</Button>\n                <div align='center'>\n                  \n                </div>                \n              </Grid>\n              \n              {/* <Grid item xs={12} md={3} lg={3}>\n                {jobmatchingIcon}\n              </Grid>\n              <Grid item xs={12} md={9} lg={9}>\n                <Typography variant='h6'> Create new jobs </Typography>\n              </Grid>   */}\n              <Grid item xs={6} md={3} lg={3}>\n                <Button variant=\"contained\" color=\"primary\">Create New Job Matching</Button>\n                <div align='center'>           \n                  \n                </div>                \n              </Grid>\n              <Grid item xs={12} md={3} lg={3}>\n                {applicantIcon}\n              </Grid>\n              <Grid item xs={12} md={3} lg={3}>\n                <Typography variant='h6'> Number of Pending Applicants : </Typography>\n                <Typography variant='h1'> 20 </Typography>\n              </Grid> \n              <Grid item xs={6} md={3} lg={3}>\n                <Button variant=\"contained\" color=\"primary\">View Applicants</Button>\n                <div align='center'>           \n                  \n                </div>                \n              </Grid>         \n                      \n              {/* </Paper> */}\n            </Grid>\n            {/* </Paper> */}\n            {/* number of jobs */}\n            <Grid container item xs={12} md={12} lg={12} space={10}>          \n              {/* <Paper className={fixedHeightPaper}> */}\n              \n              \n              \n              {/* </Paper> */}\n            </Grid>\n            {/* Filter */}\n            {/* <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <Filter />\n              </Paper>\n            </Grid> */}\n            {/* Recent Orders */}\n            {/* <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <Orders />\n              </Paper>\n            </Grid> */}\n          </Grid>\n          {/* <Box pt={4}>\n            <Copyright />\n          </Box> */}\n        </Container>\n      </main>\n    </div>\n  );\n}\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-createJobMatching\\Dashboard-createJobMatching.js",["214","215","216","217","218"],[],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { mainListItems, secondaryListItems } from '../components/listItems';\n\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nimport {mainTheme} from \"../themes/mianTheme\";\nimport {mainStyle} from \"../styles/mainStyle\";\n\n\nexport default function DashBoard_createJobMatching() {\n  const classes = mainStyle();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <ThemeProvider theme={mainTheme}>\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Create New Job Matching\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      </ThemeProvider>\n\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        <List>{secondaryListItems}</List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={6}>\n\n            <Grid container item xs={12} md={12} lg={12} spacing=\"1\">\n              {/* <Paper className={classes.paper}> */}\n              <Grid item xs={12} md={12} lg={12}><Typography variant=\"h4\">Job Name</Typography></Grid>\n              <Grid item xs={12} md={12} lg={12}><TextField id=\"jobKeyIn\" label=\"Key in job title here\" variant=\"outlined\"/></Grid>  \n              <Grid item xs={12} md={12} lg={12}><Button variant=\"contained\" color=\"primary\">Click to Check</Button></Grid>  \n                        \n              {/* </Paper> */}\n            </Grid>\n\n            <Grid  item container xs={12} md={12} lg={12} spacing=\"1\">\n              {/* <Paper className={classes.paper}> */}\n              <Grid item xs={12} md={12} lg={12}><Typography variant=\"h4\">Upload Job Description</Typography></Grid>\n              <Grid item xs={12} md={12} lg={12}>\n                {/* <Paper className={classes.paper}> */}\n                  <Button variant=\"contained\" color=\"primary\">Click to upload</Button>\n                {/* </Paper>*/}\n              </Grid>\n                         \n              {/* </Paper> */}\n            </Grid>            \n\n            <Grid item container xs={12} md={12} lg={12} spacing=\"1\">\n              {/* <Paper className={classes.paper}> */}\n              <Grid item xs={12} md={12} lg={12}>\n                <Typography variant=\"h4\">Upload Résumé</Typography>  \n              </Grid> \n              <Grid item xs={12} md={12} lg={12}>\n                <Button variant=\"contained\" color=\"primary\">Click to upload</Button>  \n              </Grid>\n                          \n              {/* </Paper> */}\n            </Grid>\n\n            <Grid item container xs={12} md={12} lg={12} spacing=\"1\">    \n              {/* <Paper className={classes.paper}> */}\n              <Grid item xs={12} md={12} lg={12}>\n                <Typography variant=\"h4\">Enter some technical skill words for matching. e.g.:HTML, CSS, Javascript</Typography>                    \n              </Grid>\n              <Grid item xs={12} md ={12} lg={12}>\n                <TextField label=\"Single words only\" variant=\"outlined\"></TextField>\n              </Grid>\n              <Grid item xs={3} md={3} lg={3}>\n                <Button variant=\"contained\" color=\"primary\">Get Job Matching</Button>    \n              </Grid>                \n              {/* </Paper> */}                       \n            </Grid>\n          </Grid>\n          {/* <Box pt={4}>\n            <Copyright />\n          </Box> */}\n        </Container>\n      </main>\n    </div>\n  );\n}\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList\\ApplicantList.js",["219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235"],[],"import React, { useState, useEffect, Component } from 'react';\nimport {Link as routerLink, Outlet } from 'react-router-dom';\nimport {Link as Link, TableSortLabel} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from '../components/Title';\nimport applicants from '../jsonver3/applicant.json';\nimport pred from \"../jsonver3/modelprediction.json\";\nimport { Button, RootRef } from '@material-ui/core';\nimport Invoice from '../../routes/invoice';\n\nimport {getApplicantInfo, getJobInfo, getPredictionInfo, getApplicantsNum, getPredictionsNum} from \"../jsonver3/jsonUtil\";\nimport { tab } from '@testing-library/user-event/dist/tab';\n\nimport {EnhancedTableHead, getComparator, stableSort, } from \"../components/enhancedTable\";\n\nimport {tableStyle} from \"../styles/tableStyle\";\n\nlet predCount=getPredictionsNum();\n\nconst tableHead=[\n  {\n    id: \"applicantName\",\n    label: \"Name\",\n    numeric: false,\n  },\n  {\n    id: \"applicantAppliedRole\",\n    label: \"Applied Role\",\n    numeric: false,\n  },\n  {\n    id: \"suitability\",\n    label: \"Suitability\",\n    numeric: true,\n  },\n  {\n    id: \"applicantStatus\",\n    label: \"Applicant Status\",\n    numeric: false,\n  },\n  {\n    id: \"date\",\n    label: \"Date\",\n    numeric: false,\n  },\n];\n\n// read raw data from databsse\nfunction createTable(){\n  let table=[];\n  for (let i=1; i<=getApplicantsNum(); i++){\n    table.push(getApplicantInfo(i));\n  }\n  return table;\n}\n\n// generated processed data\nfunction createEnhancedData(applicantID, applicantName, applicantAppliedRole, suitability, applicantStatus, date) {\n  return { applicantID, applicantName, applicantAppliedRole, suitability, applicantStatus, date };\n}\n\n// generated table from processed data\nfunction createEnhancedTableBody(){\n  let table=createTable();\n  let enhancedTableBody=[];\n  table.map ((each) => enhancedTableBody.push(createEnhancedData(\n    each.applicantID, \n    each.applicantName,\n    getJobInfo(each.applicantAppliedJobID).jobTitle,\n    getPredictionInfo(each.applicantID,each.applicantAppliedJobID).predictionResult,\n    each.pendingStatus,\n    \"null\",\n  )));\n  return enhancedTableBody;\n}\n\n\n// generate all predictions\nlet predList=[];\nfor (var i in pred.rows){\n  predList.push(pred.rows[i][1])\n}\n\n\n\nfunction findSuitability(applicantId,jobId){\n  let suitabilityList=[];\n  for (var i=0; i<predCount;i++){\n    let eachPredEntry=pred.rows[i];\n    // console.log(eachPredEntry);\n    if (eachPredEntry[2] === applicantId ){\n      suitabilityList.push(eachPredEntry);\n    }\n    let length=suitabilityList.length;\n    // console.log(predCount);\n    for (var j=0;j<length;j++){\n      if (suitabilityList[j][3]=== jobId){\n        return suitabilityList[j][1]\n      }      \n    }\n    // return \"error\";\n  }\n}\n\n// function result (i){\n//     return getPredictionInfo(i.applicantID,i.applicantAppliedJobID).predictionResult;\n// };\n\n// // sort by suitability , id\n// function sortSuitability(x,y){\n//   if (result(x) < result(y)) {return 1;}\n//   if (result(x) > result(y)) {return -1;}\n//   return 0;\n// }\n\n\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\n//table head\n\n\n\n\n\n// function UpdatedTableBody(props){\n//   const {tableInfo}= props;\n//   return (\n//     <TableBody>\n//       {tableInfo.map((each) => (\n//             <TableRow >\n//               {/* <TableCell>{each.applicantID}</TableCell> */}              \n//               <TableCell><Link component={routerLink} to={`/applicantList:${each.applicantID}` } >{each.applicantName}</Link></TableCell>\n//               <TableCell>{each.applicantAppliedJobID}</TableCell>\n//               <TableCell>{getPredictionInfo(each.applicantID,each.applicantAppliedJobID).predictionResult}</TableCell>\n//               <TableCell>{each.pendingStatus}</TableCell>\n//               <TableCell>{\"null\"}</TableCell>\n//               {/* <TableCell align=\"right\">{row.selected}</TableCell> */}\n//             </TableRow>\n//           ))}\n//     </TableBody>\n//   )\n// }\n\n// export default function Orders() {\n\n//   const [table,setTable]=React.useState(createTable());\n\n//   const sortHandler= (property) => (event) => {\n//     setTable(table.sort(sortSuitability));\n//   }\n\n//   const classes = useStyles();\n  \n//   return (\n//     <React.Fragment>\n//       {/* <Title>All Applicants</Title> */}\n//       <Table size=\"small\">\n//         <TableHead>\n//           <TableRow>\n//             {/* <TableCell>ID</TableCell> */}\n//             {\n//               tableHead.map((eachCell) => (\n//                 <TableCell\n//                   key={eachCell.id}\n//                   align={eachCell.numeric? \"right\" : \"left\"}\n//                   >\n//                     <TableSortLabel\n//                       // active={orderBy === eachCell.id}\n//                       // direction={orderBy === eachCell.id ? order : 'asc'}\n//                       // onClick={createSortHandler(eachCell.id)}\n//                       onClick={()=>{\n//                         setTable(() => [...table.sort(sortSuitability)])\n//                         }\n//                       }\n//                     >\n//                     {eachCell.label}\n//                     </TableSortLabel>\n//                 </TableCell>\n//               ))\n//             }\n\n//             {/* <TableCell>Name</TableCell>\n//             <TableCell>Applied Role</TableCell>\n//             <TableCell>Suitability</TableCell>\n//             <TableCell>Applicant Status</TableCell>\n//             <TableCell>Date</TableCell> */}\n        \n//           </TableRow>\n//         </TableHead>\n//         <UpdatedTableBody tableInfo={table}>\n          \n//         </UpdatedTableBody>        \n//       </Table>\n\n\n//       <Button variant=\"contained\" color=\"primary\" onClick={()=>{\n//         setTable(() => [...table.sort(sortSuitability)])\n//         }\n//       }>sort by suitability %</Button>\n      \n//       <h3>{result(table[1])}</h3>\n\n//       <Button variant=\"contained\" color=\"primary\">\n        \n//       </Button>\n//       <div className={classes.seeMore}>\n//         <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n//           See more updates\n//         </Link>\n//       </div>\n\n//       {/* <Outlet></Outlet> */}\n//     </React.Fragment>\n//   );\n// }\n\nexport default function EnhancedTable() {\n  const classes = tableStyle();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"applicantName\");\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    // switch between the 2 orders\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n  \n\n  return (\n    <div className={classes.root}>\n      \n        \n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              tableHeadCells={tableHead}\n            />\n            <TableBody>\n              {stableSort(createEnhancedTableBody(), getComparator(order, orderBy))\n              \n                .map((each, index) => {\n\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow >\n                      {/* <TableCell>{each.applicantID}</TableCell> */}              \n                      <TableCell>\n                        <Link component={routerLink} to={`/applicantList:${each.applicantID}` }>\n                          {each.applicantName}\n                          </Link>\n                      </TableCell>\n                      <TableCell>{each.applicantAppliedRole}</TableCell>\n                      <TableCell align='right'>{each.suitability}</TableCell>\n                      <TableCell>{each.applicantStatus}</TableCell>\n                      <TableCell>{each.date}</TableCell>\n                      {/* <TableCell align=\"right\">{row.selected}</TableCell> */}\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        \n      \n    </div>\n  );\n}\n\n\n\n\n\n\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\sign-up\\SignUp.js",["236","237","238"],[],"import * as React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport {Link as routerLink} from 'react-router-dom';\r\n\r\nfunction Copyright(props) {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n      {' '}\r\n      <Link color=\"inherit\" href=\"https://mui.com/\">\r\n        Capstone Team 24\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function SignUp() {\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.currentTarget);\r\n    console.log({\r\n      email: data.get('email'),\r\n      password: data.get('password'),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign Up\r\n          </Typography>\r\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }} method=\"POST\">\r\n\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"firstname\"\r\n              label=\"First Name\"\r\n              name=\"firstname\"\r\n              autoComplete=\"firstname\"\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"lastname\"\r\n              label=\"Last Name\"\r\n              name=\"lastname\"\r\n              autoComplete=\"lastname\"\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              autoComplete=\"username\"\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password2\"\r\n              label=\"Confirm Password\"\r\n              type=\"password\"\r\n              id=\"password2\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            {/* <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            /> */}\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              defaultValue=\"Submit\"\r\n            >\r\n              Create new acount\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link variant=\"body2\" component={routerLink} to=\"\">\r\n                  Help\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link variant=\"body2\"  component={routerLink} to=\"/signin\">\r\n                  {\"Already have an account? Sign In\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        {/* <Copyright sx={{ mt: 8, mb: 4 }} /> */}\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList\\Dashboard-jobList.js",["239","240","241","242","243"],[],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { mainListItems, secondaryListItems } from '../components/listItems';\n\nimport JobList from './JobList';\nimport {mainTheme} from \"../themes/mianTheme\";\nimport {mainStyle} from \"../styles/mainStyle\";\n\n\n\nexport default function DashBoard_jobList() {\n  const classes = mainStyle();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <ThemeProvider theme={mainTheme}>\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            All Jobs\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      </ThemeProvider>\n\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        <List>{secondaryListItems}</List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              {/* <Paper className={classes.paper}> */}\n                <JobList />\n              {/* </Paper> */}\n            </Grid>\n          </Grid>\n          {/* <Box pt={4}>\n            <Copyright />\n          </Box> */}\n        </Container>\n      </main>\n    </div>\n  );\n}\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList\\JobList.js",["244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260"],[],"import React, { useState, useEffect } from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from '../components/Title';\n\nimport pred from \"../jsonver3/modelprediction.json\";\n\nimport { Button, RootRef } from '@material-ui/core';\n\nimport {getApplicantInfo, getJobInfo, getPredictionInfo, getJobsNum,getPredictionsNum, getUserInfo} from \"../jsonver3/jsonUtil\";\nimport {Link as routerLink, Outlet } from 'react-router-dom';\n\nimport {EnhancedTableHead, getComparator, stableSort, } from \"../components/enhancedTable\";\nimport {tableStyle} from \"../styles/tableStyle\";\n\nlet jobnum=getJobsNum();\nlet predCount=getPredictionsNum();\n\n{/* <TableCell>Job Title</TableCell>\n<TableCell>Matching Date</TableCell>\n<TableCell>Update Date</TableCell>\n<TableCell>Hiring Manager</TableCell>\n<TableCell>Recruiter</TableCell>\n<TableCell>Job Description</TableCell>\n<TableCell>Job Status</TableCell> */}\n\nconst tableHead = [\n  {\n    id: \"jobTitle\",\n    label: \"Job Title\",\n  },\n  {\n    id: \"jobMatchingDate\",\n    label: \"Matching Date\",\n  },\n  {\n    id: \"jobUpdateDate\",\n    label: \"Update Date\",\n  },\n  {\n    id: \"recruiter\",\n    label: \"Recruiter\",\n  },\n  {\n    id: \"jobDescription\",\n    label: \"Job Description\",\n  },\n  {\n    id: \"jobStatus\",\n    label: \"Job Status\",\n  },\n];\n\nfunction createTable(){\n  let table=[];\n  for (let i=1; i<=jobnum; i++){\n    table.push(getJobInfo(i))\n  }\n  return table;\n}\n\n// generated processed data\nfunction createEnhancedData(jobID, jobTitle, jobMatchingDate, jobUpdateDate, recruiter, jobDescription, jobStatus) {\n  return {jobID, jobTitle, jobMatchingDate, jobUpdateDate, recruiter, jobDescription, jobStatus };\n}\n\n// generated table from processed data\nfunction createEnhancedTableBody(){\n  let table=createTable();\n  let enhancedTableBody=[];\n  table.map ((each) => enhancedTableBody.push(createEnhancedData(\n    each.jobID,\n    each.jobTitle, \n    each.jobMatchingDate,\n    each.jobUpdateDate,\n    getUserInfo(each.recruiterID).userFirstName + \" \" + getUserInfo(each.recruiterID).userLastName,\n    each.jobDescription,\n    each.jobStatus,\n  )));\n  return enhancedTableBody;\n}\n\n\n\n// sort by suitability , id\nfunction sortSuitability(x,y){\n  if (x.suitability < y.suitability) {return 1;}\n  if (x.suitability > y.suitability) {return -1;}\n  return 0;\n}\n\nfunction sortId(x,y){\n  if (x.id < y.id) {return 1;}\n  if (x.id > y.id) {return -1;}\n  return 0;\n}\n\n\n\n// rows.sort(sortSuitability);\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\n\n\n\nexport default function EnhancedTable() {\n  const classes = tableStyle();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"applicantName\");\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    // switch between the 2 orders\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  return (\n    <div className={classes.root}>    \n        \n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              tableHeadCells={tableHead}\n            />\n            <TableBody>\n              {stableSort(createEnhancedTableBody(), getComparator(order, orderBy))\n              \n                .map((each, index) => {\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  return (\n                    <TableRow >\n                      {/* <TableCell>{each.applicantID}</TableCell> */}              \n                      <TableCell>\n                        <Link component={routerLink} to={`/jobList:${each.jobID}`}>\n                          {each.jobTitle}\n                        </Link>\n                      </TableCell>\n                      <TableCell>{each.jobMatchingDate}</TableCell>\n                      <TableCell>{each.jobUpdateDate}</TableCell>\n                      <TableCell>{each.recruiter}</TableCell>\n                      <TableCell>{each.jobDescription}</TableCell>\n                      <TableCell>{each.jobStatus}</TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        \n      \n    </div>\n  );\n}\n\n// export function JobListTable() {\n//   const classes = useStyles();\n//   const [rowsInfo,setRowsInfo]=useState(rows);\n//   const prevRowsInfo=rows;\n//   // useEffect(() => {\n//   //   setRowsInfo(originRows)\n//   // });\n//   let table=createTable();\n//   return (\n//     <React.Fragment>\n//       {/* <Title>All Jobs</Title> */}\n//       <Table size=\"small\">\n//         <TableHead>\n//           <TableRow>\n//             {/* <TableCell>ID</TableCell> */}\n//             <TableCell>Job Title</TableCell>\n//             <TableCell>Matching Date</TableCell>\n//             <TableCell>Update Date</TableCell>\n//             <TableCell>Hiring Manager</TableCell>\n//             <TableCell>Recruiter</TableCell>\n//             <TableCell>Job Description</TableCell>\n//             <TableCell>Job Status</TableCell>\n//             {/* <TableCell align=\"right\">Selected or not</TableCell> */}\n\n//           </TableRow>\n//         </TableHead>\n//         <TableBody>\n//           {table.map((each) => (\n//             <TableRow >\n//               {/* <TableCell>{row.id}</TableCell> */}\n//               <TableCell><Link component={routerLink} to={`/jobList:${each.jobID}`}>{each.jobTitle}</Link></TableCell>\n//               <TableCell>{each.jobMatchingDate}</TableCell>\n//               <TableCell>{each.jobUpdateDate}</TableCell>\n//               <TableCell>{\"*each.hiringManager*\"}</TableCell>\n//               <TableCell>{each.recruiterID}</TableCell>\n//               <TableCell>{each.jobDescription}</TableCell>\n//               <TableCell>{each.jobStatus}</TableCell>\n//               {/* <TableCell align=\"right\">{row.selected}</TableCell> */}\n//             </TableRow>\n//           ))}\n//         </TableBody>        \n//       </Table>\n      \n      \n//       {/* <div className={classes.seeMore}>\n//         <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n//           See more updates\n//         </Link>\n//       </div> */}\n      \n//     </React.Fragment>\n//   );\n// }\n\n\n\n\n\n\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\routes\\invoices.jsx",["261"],[],"import { NavLinkm, Link } from \"react-router-dom\";\r\nimport {getInvoices} from './data'\r\nimport { Outlet } from \"react-router-dom\";\r\n\r\n// export default function Invoices() {\r\n//     return (\r\n//       <main style={{ padding: \"1rem 0\" }}>\r\n//         <h2>Invoices</h2>\r\n//         <Link to=\"/\">Home</Link>\r\n//       </main>\r\n//     );\r\n//   }\r\n\r\n\r\nexport default function Invoices() {\r\n    let invoices = getInvoices();\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        <nav\r\n          style={{\r\n            borderRight: \"solid 2px\",\r\n            padding: \"1rem\",\r\n          }}\r\n        >\r\n          {invoices.map((invoice) => (\r\n            <Link\r\n              style={{ display: \"block\", margin: \"1rem 0\" }}\r\n              to={`/invoices/${invoice.number}`}\r\n              key={invoice.number}\r\n            >\r\n              {invoice.name}\r\n            </Link>\r\n          ))}\r\n          <Outlet/>\r\n        </nav>\r\n        <Outlet/>\r\n      </div>\r\n    );\r\n  }","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\routes\\expenses.jsx",[],[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\routes\\data.js",[],[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\routes\\invoice.jsx",["262"],[],"import { useParams } from \"react-router-dom\";\r\nimport { getInvoice } from \"./data\";\r\n\r\nexport default function Invoice() {\r\n    let para=useParams();\r\n    let invoice = getInvoice(parseInt(para.invoiceId, 10));\r\n    let InvoiceId=para.invoiceId;\r\n    // return <h2>Invoice # {InvoiceId}</h2>;\r\n    return (\r\n        <main style={{ padding: \"1rem\" }}>\r\n          <h2>Total Due: {invoice.amount}</h2>\r\n          <p>\r\n            {invoice.name}: {invoice.number}\r\n          </p>\r\n          <p>Due Date: {invoice.due}</p>\r\n        </main>\r\n      );\r\n  }","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\components\\listItems.js",["263","264"],[],"import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\n\nimport { Link } from 'react-router-dom';\n\nexport const mainListItems = (\n  <div>\n    <ListItem button component={Link} to=\"/homepage\">\n      <ListItemIcon>\n        <DashboardIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Dashboard\" />\n    </ListItem>\n    {/* <ListItem button>\n      <ListItemIcon>\n        <ShoppingCartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Orders\" />\n    </ListItem> */}\n    <ListItem button component={Link} to=\"/applicantList\">\n      <ListItemIcon>\n        <PeopleIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Applicants\" />\n    </ListItem>\n    {/* ?? what is activity button */}\n    <ListItem button component={Link} to=\"/createJobMatching\">\n      <ListItemIcon>\n        <BarChartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Activities\" />\n    </ListItem>\n    <ListItem button component={Link} to=\"/jobList\">\n      <ListItemIcon>\n        <LayersIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Jobs\" />\n    </ListItem>\n  </div>\n);\n\nexport const secondaryListItems = (\n  <div>\n    <ListSubheader inset>Now signed in as:</ListSubheader>\n    <ListItem button>\n      <ListItemIcon>\n        <PeopleIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Joe Biden\" />\n    </ListItem>\n    \n    {/* <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Current month\" />\n    </ListItem> */}\n    {/* <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Last quarter\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Year-end sale\" />\n    </ListItem> */}\n  </div>\n);\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\components\\icons.js",["265"],[],"import { Icon } from \"@material-ui/core\";\r\nimport AccessibilityNewIcon from '@material-ui/icons/AccessibilityNew';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\n\r\nexport const applicantIcon =(\r\n    <div>\r\n      <AccessibilityNewIcon style={{fontSize : 150}}></AccessibilityNewIcon> \r\n    </div>\r\n  );\r\n  \r\nexport const jobIcon =(\r\n    <div>\r\n      <WorkIcon style={{fontSize : 150}}></WorkIcon>\r\n    </div>\r\n);\r\n\r\nexport const jobmatchingIcon =(\r\n  <div>\r\n    <DescriptionIcon style={{fontSize : 150}}></DescriptionIcon>\r\n  </div>\r\n);","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\components\\Title.js",[],[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList-detailed\\Dashboard-applicantList-detailed.js",["266","267","268","269","270","271","272","273","274"],[],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { mainListItems, secondaryListItems,  } from '../components/listItems';\nimport { applicantIcon, jobIcon } from '../components/icons';\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport {ReturnApplicantInfo,ReturnApplicantName,ReturnApplicantInfoTable, Reprofile, ReturnApplicantHistory} from './GetApplicantInfo';\n\nimport {mainTheme} from \"../themes/mianTheme\";\nimport {mainStyle} from \"../styles/mainStyle\";\n\n\n\nexport default function DashBoard_homepage() {\n  const classes = mainStyle();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <ThemeProvider theme={mainTheme}>\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Applicant : CV - <ReturnApplicantName></ReturnApplicantName>\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      </ThemeProvider>\n\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        <List>{secondaryListItems}</List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={10}>\n            {/* number of applicants */}\n            {/* <Paper className={fixedHeightPaper}> */}\n            <Grid container item xs={12} md={12} lg={12} spacing={6}>  \n              <Grid item xs={12} md={12} lg={12}>\n                {/* <Paper className={classes.paper}> */}\n                <ReturnApplicantInfo></ReturnApplicantInfo>\n               {/* </Paper>  */}\n              </Grid>        \n              <Grid item xs={12} md={12} lg={12}>\n                {/* <Paper className={classes.paper}> */}\n                <ReturnApplicantInfoTable></ReturnApplicantInfoTable>\n               {/* </Paper>  */}\n              </Grid>   \n              <Grid item xs={12} md={12} lg={12}>\n                {/* <Paper className={classes.paper}> */}\n                <Reprofile></Reprofile>\n               {/* </Paper>  */}\n              </Grid> \n              <Grid item xs={12} md={12} lg={12}>\n                {/* <ReturnApplicantHistory></ReturnApplicantHistory> */}\n              </Grid> \n            </Grid>\n            \n          </Grid>\n          {/* <Box pt={4}>\n            <Copyright />\n          </Box> */}\n        </Container>\n      </main>\n    </div>\n  );\n}\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-applicantList-detailed\\GetApplicantInfo.js",["275","276","277","278","279","280","281","282","283","284","285","286"],[],"import { useParams } from \"react-router-dom\";\r\nimport {getApplicantInfo, getJobInfo, getPredictionInfo, getAllPredictionInfo} from \"../jsonver3/jsonUtil\";\r\nimport { Tab, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\r\nimport {Box} from '@material-ui/core';\r\nimport Title from \"../components/Title\";\r\nimport {Select} from \"@material-ui/core\";\r\n\r\nimport {EnhancedTableHead, getComparator, stableSort, } from \"../components/enhancedTable\";\r\nimport {tableStyle} from \"../styles/tableStyle\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nexport function ReturnApplicantInfo(){\r\n    let params=useParams();\r\n    let applicantID=parseInt(params.applicantID.substring(1,),10);\r\n    let applicantSelected=getApplicantInfo(applicantID);\r\n    let jobSelected=getJobInfo(parseInt(applicantSelected.applicantAppliedJobID));\r\n    let predictionSelected=getPredictionInfo(applicantID,parseInt(applicantSelected.applicantJob));\r\n    let AllPredictionInfoTable=getAllPredictionInfo(applicantID);\r\n    \r\n    \r\n    \r\n    return (\r\n        <div>\r\n            {/* <Typography variant=\"h5\" >Selected Applicant : applicantID {applicantID}</Typography> */}\r\n            {/* <Typography>\r\n                <Box fontWeight=\"fontWeightRegular\" > \r\n                    Selected Applicant Infomation :\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                    Applicant ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\" > \r\n                    {applicantSelected.applicantID}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Name : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\" > \r\n                {applicantSelected.applicantName}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant File : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {applicantSelected.applicantFile} \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Status : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {applicantSelected.applicantStatus}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Applied Job ID: \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {applicantSelected.applicantJob}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Title : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobTitle}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Matching date : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobMatchingDate}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Update Date : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobUpdateDate}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Recruiter ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.recruiterID}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Hiring Manager ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.hiringManagerID}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Description :  \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobDescription}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Requirments : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobRequirements}\r\n                </Box> \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Prediction ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.predictionID}\r\n                </Box>  \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Prediction Result (%) : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.predictionResult*100} %\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Education Level : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.applicantEducation}\r\n                </Box>          \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Experience : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.applicantExperience}\r\n                </Box>  \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Prediction Skills : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.applicantSkills}\r\n                </Box>\r\n            </Typography> */}\r\n        \r\n            <Typography>\r\n                <Box fontWeight={\"fontWeightBold\"}>\r\n                    Applicant Applied Job: {jobSelected.jobTitle}\r\n                </Box>\r\n                <Box fontWeight={\"fontWeightBold\"}>\r\n                    Current Reprofiled Job: {}\r\n                </Box>\r\n                <Box fontWeight={\"fontWeightBold\"}>\r\n                    Applicant Status:  {applicantSelected.pendingStatus}\r\n                </Box>\r\n                \r\n            </Typography>\r\n            \r\n        </div>\r\n    );     \r\n}\r\n\r\nexport function ReturnApplicantInfoTable(){\r\n    let params=useParams();\r\n    let applicantID=parseInt(params.applicantID.substring(1,),10);\r\n    let applicantSelected=getApplicantInfo(applicantID);\r\n    let jobSelected=getJobInfo(parseInt(applicantSelected.applicantJob));\r\n    let predictionSelected=getPredictionInfo(applicantID,parseInt(applicantSelected.applicantJob));\r\n    let AllPredictionInfoTable=getAllPredictionInfo(applicantID);\r\n\r\n\r\n    \r\n    return(\r\n        <div>\r\n            <Title>\r\n                Job Matching Results:\r\n            </Title>\r\n            <TableHead>\r\n                <TableCell>Job Name</TableCell>\r\n                <TableCell>% Suitability</TableCell>\r\n                <TableCell>Rank in Job</TableCell>\r\n                <TableCell>Applicant Job Skills</TableCell>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    AllPredictionInfoTable.map(each =>(\r\n                        <TableRow>\r\n                            <TableCell>{getJobInfo(each.jobID).jobTitle}</TableCell>\r\n                            <TableCell>{each.predictionResult}</TableCell>\r\n                            <TableCell>{each.Rank}</TableCell>\r\n                            <TableCell>{each.applicantSkills}</TableCell>\r\n                        </TableRow>\r\n                    ))\r\n                }\r\n            </TableBody>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function ReturnApplicantName(){\r\n    let params=useParams();\r\n    let applicantID=params.applicantID;\r\n    let applicantSelected=getApplicantInfo(parseInt(applicantID.substring(1,),10));\r\n    return applicantSelected.applicantName;\r\n}\r\n\r\nexport function Reprofile(){\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Title>Update Applicant Status</Title>\r\n            <TableHead>\r\n                <TableCell>Recruiter Decision</TableCell>\r\n                <TableCell>Or</TableCell>\r\n                <TableCell>If profiling, select job:</TableCell>\r\n            </TableHead>\r\n            <TableBody>\r\n                <TableRow>\r\n                    <TableCell><Select></Select></TableCell>\r\n                    <TableCell></TableCell>\r\n                    <TableCell><Select></Select></TableCell>\r\n                </TableRow>\r\n            </TableBody>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport function ReturnApplicantHistory(){\r\n\r\n    // const classes = tableStyle();\r\n    // const [order, setOrder] = useState(\"asc\");\r\n    // const [orderBy, setOrderBy] = useState(\"jobTitle\");\r\n\r\n    // const handleRequestSort = (event, property) => {\r\n    //     const isAsc = orderBy === property && order === \"asc\";\r\n    //     // switch between the 2 orders\r\n    //     setOrder(isAsc ? \"desc\" : \"asc\");\r\n    //     setOrderBy(property);\r\n    // }\r\n\r\n    // // read raw data from databsse\r\n    // function createTable(){\r\n    //     let table=[];\r\n    //     for (let i=1; i<=getApplicantsNum(); i++){\r\n    //     table.push(getApplicantInfo(i));\r\n    //     }\r\n    //     return table;\r\n    // }\r\n    \r\n    // // generated processed data\r\n    // function createEnhancedData(applicantID, applicantName, applicantAppliedRole, suitability, applicantStatus, date) {\r\n    //     return { applicantID, applicantName, applicantAppliedRole, suitability, applicantStatus, date };\r\n    // }\r\n    \r\n    // // generated table from processed data\r\n    // function createEnhancedTableBody(){\r\n    //     let table=createTable();\r\n    //     let enhancedTableBody=[];\r\n    //     table.map ((each) => enhancedTableBody.push(createEnhancedData(\r\n    //     each.applicantID, \r\n    //     each.applicantName,\r\n    //     getJobInfo(each.applicantAppliedJobID).jobTitle,\r\n    //     getPredictionInfo(each.applicantID,each.applicantAppliedJobID).predictionResult,\r\n    //     each.pendingStatus,\r\n    //     \"null\",\r\n    //     )));\r\n    //     return enhancedTableBody;\r\n    // }\r\n\r\n    let params=useParams();\r\n    let applicantID=parseInt(params.applicantID.substring(1,),10);\r\n    let applicantSelected=getApplicantInfo(applicantID);\r\n\r\n    const tableHead=[\r\n        {\r\n            id:\"jobTitle\",\r\n            label:\"Job Title\",\r\n        },\r\n        {\r\n            id:\"status\",\r\n            label:\"Job Status\",\r\n        },\r\n        {\r\n            id:\"applicantAppliedDate\",\r\n            label:\"Date\",\r\n        },\r\n        {\r\n            id:\"recruiter\",\r\n            label:\"Recruiter\",\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Title>\r\n                Applicant History\r\n            </Title>\r\n            {/* <Table\r\n                className={classes.table}\r\n                aria-labelledby=\"tableTitle\"\r\n                aria-label=\"enhanced table\"\r\n            >\r\n                <EnhancedTableHead\r\n                classes={classes}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onRequestSort={handleRequestSort}\r\n                tableHeadCells={tableHead}\r\n                />\r\n                <TableBody>\r\n                {stableSort(createEnhancedTableBody(), getComparator(order, orderBy))\r\n                \r\n                    .map((each, index) => {\r\n\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                    return (\r\n                        <TableRow >\r\n                                   \r\n                        <TableCell>\r\n                            <Link component={routerLink} to={`/applicantList:${each.applicantID}` }>\r\n                            {each.applicantName}\r\n                            </Link>\r\n                        </TableCell>\r\n                        <TableCell>{each.applicantAppliedRole}</TableCell>\r\n                        <TableCell align='right'>{each.suitability}</TableCell>\r\n                        <TableCell>{each.applicantStatus}</TableCell>\r\n                        <TableCell>{each.date}</TableCell>\r\n                       \r\n                        </TableRow>\r\n                    );\r\n                    })}\r\n                </TableBody>\r\n            </Table> */}\r\n        </div>\r\n    )\r\n}","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\json\\jsonUtil.js",["287"],[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList-detailed\\Dashboard-jobList-detailed.js",["288","289","290","291","292","293","294","295"],[],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { mainListItems, secondaryListItems,  } from '../components/listItems';\nimport { applicantIcon, jobIcon } from '../components/icons';\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport {ReturnJobInfo, GetJobTitle} from './ReturnJobInfo';\nimport {ReturnApplicantsInfo} from './ReturnApplicantsInfo';\n\nimport {mainTheme} from \"../themes/mianTheme\";\nimport {mainStyle} from \"../styles/mainStyle\";\n\n\nexport default function DashBoard_homepage() {\n  const classes = mainStyle();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <ThemeProvider theme={mainTheme}>\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Job : <GetJobTitle></GetJobTitle>            \n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      </ThemeProvider>\n\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        <List>{secondaryListItems}</List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={4}>\n            {/* number of applicants */}\n            {/* <Paper className={fixedHeightPaper}> */}\n            <Grid container item xs={12} md={12} lg={12} space={10}>          \n              {/* <Paper className={classes.paper}> */}\n                <ReturnJobInfo></ReturnJobInfo>\n              {/* </Paper>  */}\n            </Grid>\n            <Grid container item xs={12} md={12} lg={12} space={10}>          \n              {/* <Paper className={classes.paper}> */}\n                <ReturnApplicantsInfo></ReturnApplicantsInfo>\n              {/* </Paper>  */}\n            </Grid>\n            \n          </Grid>\n          {/* <Box pt={4}>\n            <Copyright />\n          </Box> */}\n        </Container>\n      </main>\n    </div>\n  );\n}\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList-detailed\\ReturnApplicantsInfo.js",["296","297","298","299","300","301","302"],[],"import { useParams } from \"react-router-dom\";\r\nimport {getApplicantInfo, getJobInfo, getPredictionInfo, getAppliedApplicants, getApplicantsNum} from \"../jsonver3/jsonUtil\";\r\nimport { Table, TableCell, TableHead, Typography, TableRow, TableBody } from \"@material-ui/core\";\r\nimport {Box} from '@material-ui/core';\r\nimport React from \"react\";\r\nimport Title from '../components/Title';\r\nimport { TabUnselected } from \"@material-ui/icons\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\n\r\nfunction createTable(applicantList){\r\n    let table=[];\r\n    for (let i in applicantList){\r\n        table.push(getApplicantInfo(applicantList[i]));\r\n    }\r\n    return table;\r\n}\r\n\r\n\r\n//checkboxes\r\n\r\nfunction Checkboxes() {\r\n    const [checked, setChecked] = React.useState(true);\r\n  \r\n    const handleChange = (event) => {\r\n      setChecked(event.target.checked);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n          <Checkbox\r\n            checked={checked}\r\n            onChange={handleChange}\r\n            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n          />\r\n        </div>)\r\n}\r\n\r\nexport function ReturnApplicantsInfo(){\r\n    let params=useParams();\r\n    let jobID=params.jobID;\r\n    let jobSelected=getJobInfo(parseInt(jobID.substring(1,)));\r\n    let appliedApplicantsList=getAppliedApplicants(jobID.substring(1,));\r\n    let table=createTable(appliedApplicantsList);\r\n    let suitability=getPredictionInfo()\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title>All applicants applied to this job</Title>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Applicant Name</TableCell>\r\n                        <TableCell>% Suitability</TableCell>\r\n                        <TableCell>Skills</TableCell>\r\n                        <TableCell>Applicant Status</TableCell>\r\n                        <TableCell>Change Applicant Status</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        table.map(each => (\r\n                            <TableRow>\r\n                                <TableCell>{each.applicantName}</TableCell>\r\n                                <TableCell>{getPredictionInfo(each.applicantID,each.applicantAppliedJobID).predictionResult*100}</TableCell>\r\n                                <TableCell>{getPredictionInfo(each.applicantID,each.applicantAppliedJobID).applicantSkills}</TableCell>\r\n                                <TableCell>{getApplicantInfo(each.applicantID).pendingStatus}</TableCell>\r\n                                <TableCell><Checkbox/></TableCell>\r\n                            </TableRow>\r\n                        ))\r\n                    }\r\n                </TableBody>\r\n                \r\n            </Table>\r\n            {/* <text>Test: {appliedApplicantsList}{getApplicantsNum()}</text> */}\r\n        </React.Fragment>\r\n    )\r\n}","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\dashboard-jobList-detailed\\ReturnJobInfo.js",["303","304"],[],"import { useParams } from \"react-router-dom\";\r\nimport {getApplicantInfo, getJobInfo, getPredictionInfo} from \"../jsonver3/jsonUtil\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport {Box} from '@material-ui/core';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nexport function ReturnJobInfo(){\r\n    let params=useParams();\r\n    let jobID=params.jobID;\r\n    let jobSelected=getJobInfo(parseInt(jobID.substring(1,)));\r\n    \r\n    return (\r\n        <div>\r\n            {/* <Typography variant=\"h5\" >Selected Job : jobID {jobID}</Typography> */}\r\n            <Typography>\r\n\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                    Job Matching date : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                    {jobSelected.jobMatchingDate}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                    Job Update Date : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                    {jobSelected.jobUpdateDate}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                    Job Recruiter ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                    {jobSelected.recruiterID}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                    Job Requirments : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                    {jobSelected.jobKeywords}\r\n                </Box> \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                    Job Status : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                    {jobSelected.jobStatus}\r\n                </Box> \r\n                <Button variant=\"contained\">\r\n                    Switch the Job Status\r\n                </Button>\r\n                {/* <Box fontWeight=\"fontWeightRegular\" > \r\n                    Selected Applicant Infomation :\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                    Job ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\" > \r\n                    {jobSelected.jobID}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Name : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\" > \r\n                {jobSelected.jobTitle}\r\n                </Box>\r\n                \r\n                \r\n                \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Hiring Manager ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.hiringManagerID}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Description :  \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobDescription}\r\n                </Box>\r\n                 */}\r\n                \r\n            </Typography>\r\n        </div>\r\n    );     \r\n}\r\n\r\nexport function GetJobTitle(){\r\n    let params=useParams();\r\n    let jobID=params.jobID;\r\n    let jobSelected=getJobInfo(parseInt(jobID.substring(1,)));\r\n\r\n    return (jobSelected.jobTitle);\r\n}","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\jsonver3\\jsonUtil.js",["305"],[],"import allapplicants from \"./applicant.json\"\r\nimport alljobs from \"./matchedjob.json\"\r\nimport allpredictions from \"./modelprediction.json\"\r\nimport allusers from \"./user.json\"\r\nimport allapplicanthistory from \"./applicanthistory.json\"\r\n\r\n\r\nlet allApplicants=allapplicants.rows;\r\nlet allJobs=alljobs.rows;\r\nlet allPredictions=allpredictions.rows;\r\nlet allUsers=allusers.rows;\r\nlet allApplicantHistory=allapplicanthistory.rows;\r\n\r\n\r\nlet allApplicantsNum=allApplicants.length;\r\nlet allJobsNum=allJobs.length;\r\nlet allPredictionsNum=allPredictions.length;\r\nlet allUsersNum=allUsers.length;\r\nlet allApplicantHistoryNum=allApplicantHistory.length;\r\n\r\nexport function getApplicantsNum(){\r\n    return allApplicantsNum;\r\n}\r\n\r\nexport function getJobsNum(){\r\n    return allJobsNum;\r\n}\r\n\r\nexport function getPredictionsNum(){\r\n    return allPredictionsNum;\r\n}\r\n\r\nexport function getUsersNum(){\r\n    return allUsersNum;\r\n}\r\n\r\nexport function getApplicantHistoryNum(){\r\n    return allApplicantHistoryNum;\r\n}\r\n\r\nexport function getApplicantInfo(applicantID){\r\n    let applicantIDInt=parseInt(applicantID);\r\n    for (let i=0; i<allApplicantsNum; i++){\r\n        let entry= allApplicants[i];\r\n        if (applicantIDInt==entry[0]){\r\n            return ({applicantID:applicantID, applicantResume:entry[1], applicantName:entry[2], \r\n                    applicantAppliedJobID:entry[3], reprofile:entry[4],\r\n                    reprofileID:entry[5], pendingStatus:entry[6]});\r\n            }\r\n        \r\n    }\r\n    return \"error\";\r\n}\r\n\r\nexport function getJobInfo(jobID){\r\n    let jobIDInt=parseInt(jobID);\r\n    for (let i=0; i<allJobsNum; i++){\r\n        let entry= allJobs[i];\r\n        if (jobIDInt===entry[0]){\r\n            return ({jobID:entry[0], jobTitle:entry[1], \r\n                jobMatchingDate:entry[2], jobUpdateDate:entry[3], \r\n                recruiterID:entry[4], jobDescription:entry[5], \r\n                jobKeywords:entry[6], jobStatus:entry[7]});                \r\n            }\r\n    }\r\n    return \"error\";\r\n}\r\n\r\nexport function getPredictionInfo(applicantID, jobID){\r\n    let applicantIDInt=parseInt(applicantID);\r\n    let jobIDInt=parseInt(jobID);\r\n    for (let i=0; i<allPredictionsNum; i++){\r\n        let entry= allPredictions[i];\r\n        if (applicantIDInt===entry[2] && jobIDInt===entry[3]){\r\n            return ({predictionID:entry[0], predictionResult:entry[1], \r\n                applicantID:entry[2], jobID:entry[3], \r\n                applicantSkills:entry[4]});\r\n        }\r\n    }\r\n    return \"error\";\r\n}\r\n\r\nexport function getAllPredictionInfo(applicantID){\r\n    let applicantIDInt=parseInt(applicantID);\r\n    let result=[];\r\n    // let jobIDInt=parseInt(jobID);\r\n    for (let i=0; i<allPredictionsNum; i++){\r\n        let entry= allPredictions[i];\r\n        if (applicantIDInt===entry[2] ){\r\n            result.push({predictionID:entry[0], predictionResult:entry[1], \r\n                applicantID:entry[2], jobID:entry[3], \r\n                applicantSkills:entry[4]});\r\n        }\r\n    }\r\n    if (result.length===0){\r\n        return \"error\";\r\n    }\r\n    else{\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function getApplicantHistoryInfo(applicantID){\r\n    let result=[];\r\n    let applicantIDInt=parseInt(applicantID)\r\n    \r\n    for (let i=0; i<allApplicantHistoryNum; i++){\r\n        let entry=allApplicantHistory[i];\r\n        if (applicantIDInt===entry[2]){\r\n            result.push({appicantHistoryID:entry[0], applicantPendingStatus:entry[1]\r\n                , applicantID:entry[2], applicantAppliedJobID:entry[3]\r\n                , recruiterID:entry[4], applicantStatusChangeDate: entry[5], })\r\n        }\r\n    }\r\n    if (result.length===0){\r\n        return \"none of history\";\r\n    }else{\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nexport function getUserInfo(userID){\r\n    let userIDInt=parseInt(userID);\r\n    for (let i=0; i<allUsersNum; i++){\r\n        let entry=allUsers[i]\r\n        if (userIDInt===entry[0]){\r\n            return ({userID: entry[0], userName: entry[1], userFirstName: entry[2], userLastName: entry[3],\r\n            password: entry[4], lastLogin: entry[5], isSuperUser: entry[6], email: entry[7],\r\n            isStaff: entry[8], isActive: entry[9], dateJoined: entry[10]})\r\n        }\r\n    }\r\n    return \"error\";\r\n}\r\n\r\n// this is only for applicant page - detailed\r\nexport function getAppliedApplicants(jobID){\r\n    let result=[];\r\n    let jobIDInt=parseInt(jobID);\r\n    \r\n    for (let i=1; i<=allApplicantsNum; i++){\r\n        let appliedJobID=parseInt(getApplicantInfo(i).applicantAppliedJobID);\r\n        if (appliedJobID===jobIDInt){\r\n            result.push(i);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n","C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\themes\\mianTheme.js",[],[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\styles\\mainStyle.js",[],[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\styles\\tableStyle.js",[],[],"C:\\Users\\12500\\Desktop\\Capstone\\capstone_24_schenker\\capstone\\src\\pages\\components\\enhancedTable.js",["306","307","308","309","310","311","312","313","314","315","316","317","318","319","320"],[],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\n\r\nimport {tableStyle} from \"../styles/tableStyle\";\r\nimport { Box } from \"@material-ui/core\";\r\nexport function createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\r\n  createData(\"Donut\", 452, 25.0, 51, 4.9),\r\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\r\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\r\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\r\n  createData(\"Honeycomb\", 408, 3.2, 87, 6.5),\r\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\r\n  createData(\"Jelly Bean\", 375, 0.0, 94, 0.0),\r\n  createData(\"KitKat\", 518, 26.0, 65, 7.0),\r\n  createData(\"Lollipop\", 392, 0.2, 98, 0.0),\r\n  createData(\"Marshmallow\", 318, 0, 81, 2.0),\r\n  createData(\"Nougat\", 360, 19.0, 9, 37.0),\r\n  createData(\"Oreo\", 437, 18.0, 63, 4.0)\r\n];\r\n\r\n// compare\r\n// orderby is the index\r\nexport function descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n// order is the type of ordering\r\nexport function getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? //if true then desc\r\n      (a, b) => descendingComparator(a, b, orderBy)\r\n    : //else -desc (increasing)\r\n      (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nexport function stableSort(array, comparator) {\r\n  // array in array\r\n  // array.sort((a, b) => a.which - b.which);\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n  // return [...array];\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: \"Dessert (100g serving)\"\r\n  },\r\n  { id: \"calories\", numeric: true, disablePadding: false, label: \"Calories\" },\r\n  { id: \"fat\", numeric: true, disablePadding: false, label: \"Fat (g)\" },\r\n  { id: \"carbs\", numeric: true, disablePadding: false, label: \"Carbs (g)\" },\r\n  { id: \"protein\", numeric: true, disablePadding: false, label: \"Protein (g)\" }\r\n];\r\n\r\nexport function EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    order,\r\n    orderBy,\r\n    onRequestSort,\r\n    tableHeadCells,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {tableHeadCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"normal\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              <Box fontWeight={\"fontWeightBold\"}>\r\n                {headCell.label}\r\n              </Box>\r\n              \r\n              {/* print sorting method */}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired\r\n};\r\n\r\n// for test\r\nfunction EnhancedTable() {\r\n  const classes = tableStyle();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"calories\");\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    // switch between the 2 orders\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                    >\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                      >\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.calories}</TableCell>\r\n                      <TableCell align=\"right\">{row.fat}</TableCell>\r\n                      <TableCell align=\"right\">{row.carbs}</TableCell>\r\n                      <TableCell align=\"right\">{row.protein}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}",{"ruleId":"321","severity":1,"message":"322","line":8,"column":8,"nodeType":"323","messageId":"324","endLine":8,"endColumn":16},{"ruleId":"321","severity":1,"message":"325","line":9,"column":8,"nodeType":"323","messageId":"324","endLine":9,"endColumn":16},{"ruleId":"321","severity":1,"message":"326","line":10,"column":8,"nodeType":"323","messageId":"324","endLine":10,"endColumn":15},{"ruleId":"327","severity":1,"message":"328","line":58,"column":39,"nodeType":"329","messageId":"330","endLine":58,"endColumn":61},{"ruleId":"327","severity":1,"message":"331","line":59,"column":48,"nodeType":"329","messageId":"330","endLine":59,"endColumn":78},{"ruleId":"327","severity":1,"message":"332","line":60,"column":44,"nodeType":"329","messageId":"330","endLine":60,"endColumn":70},{"ruleId":"327","severity":1,"message":"333","line":61,"column":56,"nodeType":"329","messageId":"330","endLine":61,"endColumn":91},{"ruleId":"327","severity":1,"message":"334","line":62,"column":38,"nodeType":"329","messageId":"330","endLine":62,"endColumn":58},{"ruleId":"327","severity":1,"message":"335","line":63,"column":44,"nodeType":"329","messageId":"330","endLine":63,"endColumn":73},{"ruleId":"321","severity":1,"message":"336","line":1,"column":8,"nodeType":"323","messageId":"324","endLine":1,"endColumn":12},{"ruleId":"321","severity":1,"message":"337","line":4,"column":8,"nodeType":"323","messageId":"324","endLine":4,"endColumn":31},{"ruleId":"321","severity":1,"message":"338","line":5,"column":8,"nodeType":"323","messageId":"324","endLine":5,"endColumn":26},{"ruleId":"321","severity":1,"message":"339","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":35},{"ruleId":"321","severity":1,"message":"340","line":7,"column":8,"nodeType":"323","messageId":"324","endLine":7,"endColumn":14},{"ruleId":"321","severity":1,"message":"341","line":8,"column":8,"nodeType":"323","messageId":"324","endLine":8,"endColumn":25},{"ruleId":"321","severity":1,"message":"342","line":9,"column":8,"nodeType":"323","messageId":"324","endLine":9,"endColumn":40},{"ruleId":"321","severity":1,"message":"343","line":10,"column":10,"nodeType":"323","messageId":"324","endLine":10,"endColumn":14},{"ruleId":"321","severity":1,"message":"344","line":10,"column":16,"nodeType":"323","messageId":"324","endLine":10,"endColumn":22},{"ruleId":"321","severity":1,"message":"345","line":18,"column":10,"nodeType":"323","messageId":"324","endLine":18,"endColumn":19},{"ruleId":"321","severity":1,"message":"346","line":3,"column":10,"nodeType":"323","messageId":"324","endLine":3,"endColumn":20},{"ruleId":"321","severity":1,"message":"347","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":11},{"ruleId":"321","severity":1,"message":"348","line":16,"column":8,"nodeType":"323","messageId":"324","endLine":16,"endColumn":13},{"ruleId":"321","severity":1,"message":"343","line":17,"column":8,"nodeType":"323","messageId":"324","endLine":17,"endColumn":12},{"ruleId":"321","severity":1,"message":"349","line":24,"column":8,"nodeType":"323","messageId":"324","endLine":24,"endColumn":14},{"ruleId":"321","severity":1,"message":"350","line":39,"column":9,"nodeType":"323","messageId":"324","endLine":39,"endColumn":25},{"ruleId":"321","severity":1,"message":"351","line":10,"column":10,"nodeType":"323","messageId":"324","endLine":10,"endColumn":19},{"ruleId":"321","severity":1,"message":"352","line":14,"column":10,"nodeType":"323","messageId":"324","endLine":14,"endColumn":15},{"ruleId":"321","severity":1,"message":"353","line":14,"column":17,"nodeType":"323","messageId":"324","endLine":14,"endColumn":28},{"ruleId":"321","severity":1,"message":"354","line":14,"column":30,"nodeType":"323","messageId":"324","endLine":14,"endColumn":39},{"ruleId":"321","severity":1,"message":"355","line":14,"column":41,"nodeType":"323","messageId":"324","endLine":14,"endColumn":57},{"ruleId":"321","severity":1,"message":"356","line":14,"column":59,"nodeType":"323","messageId":"324","endLine":14,"endColumn":69},{"ruleId":"321","severity":1,"message":"346","line":3,"column":10,"nodeType":"323","messageId":"324","endLine":3,"endColumn":20},{"ruleId":"321","severity":1,"message":"347","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":11},{"ruleId":"321","severity":1,"message":"348","line":15,"column":8,"nodeType":"323","messageId":"324","endLine":15,"endColumn":13},{"ruleId":"321","severity":1,"message":"343","line":16,"column":8,"nodeType":"323","messageId":"324","endLine":16,"endColumn":12},{"ruleId":"321","severity":1,"message":"357","line":21,"column":34,"nodeType":"323","messageId":"324","endLine":21,"endColumn":49},{"ruleId":"321","severity":1,"message":"358","line":24,"column":10,"nodeType":"323","messageId":"324","endLine":24,"endColumn":21},{"ruleId":"321","severity":1,"message":"350","line":37,"column":9,"nodeType":"323","messageId":"324","endLine":37,"endColumn":25},{"ruleId":"321","severity":1,"message":"346","line":3,"column":10,"nodeType":"323","messageId":"324","endLine":3,"endColumn":20},{"ruleId":"321","severity":1,"message":"347","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":11},{"ruleId":"321","severity":1,"message":"348","line":16,"column":8,"nodeType":"323","messageId":"324","endLine":16,"endColumn":13},{"ruleId":"321","severity":1,"message":"343","line":17,"column":8,"nodeType":"323","messageId":"324","endLine":17,"endColumn":12},{"ruleId":"321","severity":1,"message":"350","line":39,"column":9,"nodeType":"323","messageId":"324","endLine":39,"endColumn":25},{"ruleId":"321","severity":1,"message":"359","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":25},{"ruleId":"321","severity":1,"message":"360","line":1,"column":27,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"361","line":1,"column":38,"nodeType":"323","messageId":"324","endLine":1,"endColumn":47},{"ruleId":"321","severity":1,"message":"344","line":2,"column":29,"nodeType":"323","messageId":"324","endLine":2,"endColumn":35},{"ruleId":"362","severity":1,"message":"363","line":3,"column":9,"nodeType":"364","messageId":"365","endLine":3,"endColumn":21,"fix":"366"},{"ruleId":"321","severity":1,"message":"367","line":3,"column":23,"nodeType":"323","messageId":"324","endLine":3,"endColumn":37},{"ruleId":"321","severity":1,"message":"368","line":8,"column":8,"nodeType":"323","messageId":"324","endLine":8,"endColumn":17},{"ruleId":"321","severity":1,"message":"369","line":10,"column":8,"nodeType":"323","messageId":"324","endLine":10,"endColumn":13},{"ruleId":"321","severity":1,"message":"370","line":11,"column":8,"nodeType":"323","messageId":"324","endLine":11,"endColumn":18},{"ruleId":"321","severity":1,"message":"371","line":13,"column":10,"nodeType":"323","messageId":"324","endLine":13,"endColumn":16},{"ruleId":"321","severity":1,"message":"372","line":13,"column":18,"nodeType":"323","messageId":"324","endLine":13,"endColumn":25},{"ruleId":"321","severity":1,"message":"326","line":14,"column":8,"nodeType":"323","messageId":"324","endLine":14,"endColumn":15},{"ruleId":"321","severity":1,"message":"373","line":17,"column":10,"nodeType":"323","messageId":"324","endLine":17,"endColumn":13},{"ruleId":"321","severity":1,"message":"374","line":91,"column":10,"nodeType":"323","messageId":"324","endLine":91,"endColumn":25},{"ruleId":"321","severity":1,"message":"375","line":123,"column":10,"nodeType":"323","messageId":"324","endLine":123,"endColumn":24},{"ruleId":"321","severity":1,"message":"376","line":127,"column":7,"nodeType":"323","messageId":"324","endLine":127,"endColumn":16},{"ruleId":"321","severity":1,"message":"377","line":265,"column":25,"nodeType":"323","messageId":"324","endLine":265,"endColumn":32},{"ruleId":"321","severity":1,"message":"355","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":24},{"ruleId":"321","severity":1,"message":"378","line":7,"column":8,"nodeType":"323","messageId":"324","endLine":7,"endColumn":16},{"ruleId":"321","severity":1,"message":"345","line":18,"column":10,"nodeType":"323","messageId":"324","endLine":18,"endColumn":19},{"ruleId":"321","severity":1,"message":"346","line":3,"column":10,"nodeType":"323","messageId":"324","endLine":3,"endColumn":20},{"ruleId":"321","severity":1,"message":"347","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":11},{"ruleId":"321","severity":1,"message":"348","line":16,"column":8,"nodeType":"323","messageId":"324","endLine":16,"endColumn":13},{"ruleId":"321","severity":1,"message":"343","line":17,"column":8,"nodeType":"323","messageId":"324","endLine":17,"endColumn":12},{"ruleId":"321","severity":1,"message":"350","line":38,"column":9,"nodeType":"323","messageId":"324","endLine":38,"endColumn":25},{"ruleId":"321","severity":1,"message":"359","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":25},{"ruleId":"321","severity":1,"message":"360","line":1,"column":27,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"368","line":7,"column":8,"nodeType":"323","messageId":"324","endLine":7,"endColumn":17},{"ruleId":"321","severity":1,"message":"369","line":9,"column":8,"nodeType":"323","messageId":"324","endLine":9,"endColumn":13},{"ruleId":"321","severity":1,"message":"379","line":11,"column":8,"nodeType":"323","messageId":"324","endLine":11,"endColumn":12},{"ruleId":"321","severity":1,"message":"371","line":13,"column":10,"nodeType":"323","messageId":"324","endLine":13,"endColumn":16},{"ruleId":"321","severity":1,"message":"372","line":13,"column":18,"nodeType":"323","messageId":"324","endLine":13,"endColumn":25},{"ruleId":"321","severity":1,"message":"380","line":15,"column":9,"nodeType":"323","messageId":"324","endLine":15,"endColumn":25},{"ruleId":"321","severity":1,"message":"381","line":15,"column":39,"nodeType":"323","messageId":"324","endLine":15,"endColumn":56},{"ruleId":"321","severity":1,"message":"344","line":16,"column":29,"nodeType":"323","messageId":"324","endLine":16,"endColumn":35},{"ruleId":"321","severity":1,"message":"382","line":22,"column":5,"nodeType":"323","messageId":"324","endLine":22,"endColumn":14},{"ruleId":"383","severity":1,"message":"384","line":24,"column":1,"nodeType":"385","messageId":"386","endLine":30,"endColumn":38},{"ruleId":"321","severity":1,"message":"387","line":91,"column":10,"nodeType":"323","messageId":"324","endLine":91,"endColumn":25},{"ruleId":"321","severity":1,"message":"388","line":97,"column":10,"nodeType":"323","messageId":"324","endLine":97,"endColumn":16},{"ruleId":"321","severity":1,"message":"375","line":107,"column":10,"nodeType":"323","messageId":"324","endLine":107,"endColumn":24},{"ruleId":"321","severity":1,"message":"376","line":111,"column":7,"nodeType":"323","messageId":"324","endLine":111,"endColumn":16},{"ruleId":"321","severity":1,"message":"377","line":151,"column":25,"nodeType":"323","messageId":"324","endLine":151,"endColumn":32},{"ruleId":"321","severity":1,"message":"389","line":1,"column":10,"nodeType":"323","messageId":"324","endLine":1,"endColumn":18},{"ruleId":"321","severity":1,"message":"390","line":7,"column":9,"nodeType":"323","messageId":"324","endLine":7,"endColumn":18},{"ruleId":"321","severity":1,"message":"391","line":7,"column":8,"nodeType":"323","messageId":"324","endLine":7,"endColumn":24},{"ruleId":"321","severity":1,"message":"392","line":11,"column":8,"nodeType":"323","messageId":"324","endLine":11,"endColumn":22},{"ruleId":"321","severity":1,"message":"393","line":1,"column":10,"nodeType":"323","messageId":"324","endLine":1,"endColumn":14},{"ruleId":"321","severity":1,"message":"346","line":3,"column":10,"nodeType":"323","messageId":"324","endLine":3,"endColumn":20},{"ruleId":"321","severity":1,"message":"347","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":11},{"ruleId":"321","severity":1,"message":"348","line":16,"column":8,"nodeType":"323","messageId":"324","endLine":16,"endColumn":13},{"ruleId":"321","severity":1,"message":"343","line":17,"column":8,"nodeType":"323","messageId":"324","endLine":17,"endColumn":12},{"ruleId":"321","severity":1,"message":"394","line":22,"column":10,"nodeType":"323","messageId":"324","endLine":22,"endColumn":23},{"ruleId":"321","severity":1,"message":"395","line":22,"column":25,"nodeType":"323","messageId":"324","endLine":22,"endColumn":32},{"ruleId":"321","severity":1,"message":"371","line":23,"column":10,"nodeType":"323","messageId":"324","endLine":23,"endColumn":16},{"ruleId":"321","severity":1,"message":"396","line":24,"column":86,"nodeType":"323","messageId":"324","endLine":24,"endColumn":108},{"ruleId":"321","severity":1,"message":"350","line":40,"column":9,"nodeType":"323","messageId":"324","endLine":40,"endColumn":25},{"ruleId":"321","severity":1,"message":"397","line":3,"column":10,"nodeType":"323","messageId":"324","endLine":3,"endColumn":13},{"ruleId":"321","severity":1,"message":"398","line":8,"column":9,"nodeType":"323","messageId":"324","endLine":8,"endColumn":26},{"ruleId":"321","severity":1,"message":"399","line":8,"column":28,"nodeType":"323","messageId":"324","endLine":8,"endColumn":41},{"ruleId":"321","severity":1,"message":"400","line":8,"column":43,"nodeType":"323","messageId":"324","endLine":8,"endColumn":53},{"ruleId":"321","severity":1,"message":"401","line":9,"column":9,"nodeType":"323","messageId":"324","endLine":9,"endColumn":19},{"ruleId":"321","severity":1,"message":"359","line":11,"column":10,"nodeType":"323","messageId":"324","endLine":11,"endColumn":18},{"ruleId":"321","severity":1,"message":"402","line":18,"column":9,"nodeType":"323","messageId":"324","endLine":18,"endColumn":27},{"ruleId":"321","severity":1,"message":"403","line":19,"column":9,"nodeType":"323","messageId":"324","endLine":19,"endColumn":31},{"ruleId":"321","severity":1,"message":"404","line":155,"column":9,"nodeType":"323","messageId":"324","endLine":155,"endColumn":20},{"ruleId":"321","severity":1,"message":"402","line":156,"column":9,"nodeType":"323","messageId":"324","endLine":156,"endColumn":27},{"ruleId":"321","severity":1,"message":"405","line":262,"column":9,"nodeType":"323","messageId":"324","endLine":262,"endColumn":26},{"ruleId":"321","severity":1,"message":"406","line":264,"column":11,"nodeType":"323","messageId":"324","endLine":264,"endColumn":20},{"ruleId":"407","severity":1,"message":"408","line":29,"column":27,"nodeType":"409","messageId":"410","endLine":29,"endColumn":29},{"ruleId":"321","severity":1,"message":"346","line":3,"column":10,"nodeType":"323","messageId":"324","endLine":3,"endColumn":20},{"ruleId":"321","severity":1,"message":"347","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":11},{"ruleId":"321","severity":1,"message":"348","line":16,"column":8,"nodeType":"323","messageId":"324","endLine":16,"endColumn":13},{"ruleId":"321","severity":1,"message":"343","line":17,"column":8,"nodeType":"323","messageId":"324","endLine":17,"endColumn":12},{"ruleId":"321","severity":1,"message":"394","line":22,"column":10,"nodeType":"323","messageId":"324","endLine":22,"endColumn":23},{"ruleId":"321","severity":1,"message":"395","line":22,"column":25,"nodeType":"323","messageId":"324","endLine":22,"endColumn":32},{"ruleId":"321","severity":1,"message":"371","line":23,"column":10,"nodeType":"323","messageId":"324","endLine":23,"endColumn":16},{"ruleId":"321","severity":1,"message":"350","line":40,"column":9,"nodeType":"323","messageId":"324","endLine":40,"endColumn":25},{"ruleId":"321","severity":1,"message":"411","line":2,"column":80,"nodeType":"323","messageId":"324","endLine":2,"endColumn":96},{"ruleId":"321","severity":1,"message":"412","line":3,"column":39,"nodeType":"323","messageId":"324","endLine":3,"endColumn":49},{"ruleId":"321","severity":1,"message":"347","line":4,"column":9,"nodeType":"323","messageId":"324","endLine":4,"endColumn":12},{"ruleId":"321","severity":1,"message":"413","line":7,"column":10,"nodeType":"323","messageId":"324","endLine":7,"endColumn":23},{"ruleId":"321","severity":1,"message":"414","line":21,"column":10,"nodeType":"323","messageId":"324","endLine":21,"endColumn":20},{"ruleId":"321","severity":1,"message":"404","line":41,"column":9,"nodeType":"323","messageId":"324","endLine":41,"endColumn":20},{"ruleId":"321","severity":1,"message":"415","line":44,"column":9,"nodeType":"323","messageId":"324","endLine":44,"endColumn":20},{"ruleId":"321","severity":1,"message":"380","line":2,"column":9,"nodeType":"323","messageId":"324","endLine":2,"endColumn":25},{"ruleId":"321","severity":1,"message":"381","line":2,"column":39,"nodeType":"323","messageId":"324","endLine":2,"endColumn":56},{"ruleId":"407","severity":1,"message":"408","line":45,"column":27,"nodeType":"409","messageId":"410","endLine":45,"endColumn":29},{"ruleId":"321","severity":1,"message":"416","line":3,"column":8,"nodeType":"323","messageId":"324","endLine":3,"endColumn":12},{"ruleId":"321","severity":1,"message":"417","line":4,"column":10,"nodeType":"323","messageId":"324","endLine":4,"endColumn":17},{"ruleId":"321","severity":1,"message":"346","line":4,"column":19,"nodeType":"323","messageId":"324","endLine":4,"endColumn":29},{"ruleId":"321","severity":1,"message":"418","line":10,"column":8,"nodeType":"323","messageId":"324","endLine":10,"endColumn":23},{"ruleId":"321","severity":1,"message":"419","line":13,"column":8,"nodeType":"323","messageId":"324","endLine":13,"endColumn":15},{"ruleId":"321","severity":1,"message":"412","line":14,"column":8,"nodeType":"323","messageId":"324","endLine":14,"endColumn":18},{"ruleId":"321","severity":1,"message":"378","line":16,"column":8,"nodeType":"323","messageId":"324","endLine":16,"endColumn":16},{"ruleId":"321","severity":1,"message":"420","line":17,"column":8,"nodeType":"323","messageId":"324","endLine":17,"endColumn":18},{"ruleId":"321","severity":1,"message":"421","line":18,"column":8,"nodeType":"323","messageId":"324","endLine":18,"endColumn":15},{"ruleId":"321","severity":1,"message":"355","line":19,"column":8,"nodeType":"323","messageId":"324","endLine":19,"endColumn":24},{"ruleId":"321","severity":1,"message":"422","line":20,"column":8,"nodeType":"323","messageId":"324","endLine":20,"endColumn":14},{"ruleId":"321","severity":1,"message":"423","line":21,"column":8,"nodeType":"323","messageId":"324","endLine":21,"endColumn":18},{"ruleId":"321","severity":1,"message":"424","line":22,"column":8,"nodeType":"323","messageId":"324","endLine":22,"endColumn":22},{"ruleId":"321","severity":1,"message":"425","line":80,"column":7,"nodeType":"323","messageId":"324","endLine":80,"endColumn":16},{"ruleId":"321","severity":1,"message":"426","line":145,"column":10,"nodeType":"323","messageId":"324","endLine":145,"endColumn":23},"no-unused-vars","'Expenses' is defined but never used.","Identifier","unusedVar","'Invoices' is defined but never used.","'Invoice' is defined but never used.","react/jsx-pascal-case","Imported JSX component Dashboard_homepage must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component DashBoard_createJobMatching must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component DashBoard_applicantList must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component DashBoard_applicantList_detailed must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Dashboard_jobList must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component DashBoard_jobList_detailed must be in PascalCase or SCREAMING_SNAKE_CASE","'logo' is defined but never used.","'DashBoard_applicantList' is defined but never used.","'DashBoard_homepage' is defined but never used.","'DashBoard_createJobMatching' is defined but never used.","'Signup' is defined but never used.","'Dashboard_jobList' is defined but never used.","'DashBoard_applicantList_detailed' is defined but never used.","'Link' is defined but never used.","'Outlet' is defined but never used.","'Copyright' is defined but never used.","'makeStyles' is defined but never used.","'Box' is defined but never used.","'Paper' is defined but never used.","'Filter' is defined but never used.","'fixedHeightPaper' is assigned a value but never used.","'Subtitles' is defined but never used.","'Radio' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'FormControlLabel' is defined but never used.","'RadioGroup' is defined but never used.","'jobmatchingIcon' is defined but never used.","'createTheme' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Component' is defined but never used.","no-useless-rename","Import Link unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"427","text":"428"},"'TableSortLabel' is defined but never used.","'TableHead' is defined but never used.","'Title' is defined but never used.","'applicants' is defined but never used.","'Button' is defined but never used.","'RootRef' is defined but never used.","'tab' is defined but never used.","'findSuitability' is defined but never used.","'preventDefault' is defined but never used.","'useStyles' is assigned a value but never used.","'labelId' is assigned a value but never used.","'Checkbox' is defined but never used.","'pred' is defined but never used.","'getApplicantInfo' is defined but never used.","'getPredictionInfo' is defined but never used.","'predCount' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'sortSuitability' is defined but never used.","'sortId' is defined but never used.","'NavLinkm' is defined but never used.","'InvoiceId' is assigned a value but never used.","'ShoppingCartIcon' is defined but never used.","'AssignmentIcon' is defined but never used.","'Icon' is defined but never used.","'applicantIcon' is defined but never used.","'jobIcon' is defined but never used.","'ReturnApplicantHistory' is defined but never used.","'Tab' is defined but never used.","'EnhancedTableHead' is defined but never used.","'getComparator' is defined but never used.","'stableSort' is defined but never used.","'tableStyle' is defined but never used.","'predictionSelected' is assigned a value but never used.","'AllPredictionInfoTable' is assigned a value but never used.","'jobSelected' is assigned a value but never used.","'applicantSelected' is assigned a value but never used.","'tableHead' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'getApplicantsNum' is defined but never used.","'Typography' is defined but never used.","'TabUnselected' is defined but never used.","'Checkboxes' is defined but never used.","'suitability' is assigned a value but never used.","'clsx' is defined but never used.","'lighten' is defined but never used.","'TablePagination' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'Switch' is defined but never used.","'DeleteIcon' is defined but never used.","'FilterListIcon' is defined but never used.","'headCells' is assigned a value but never used.","'EnhancedTable' is defined but never used.",[133,145],"Link"]