{"ast":null,"code":"import allapplicants from \"./all_applicants.json\";\nimport alljobs from \"./all_jobs.json\";\nimport allpredictions from \"./model_prediction.json\";\nlet allApplicants = allapplicants.rows;\nlet allJobs = alljobs.rows;\nlet allPredictions = allpredictions.rows;\nlet allApplicantsNum = allApplicants.length;\nlet allJobsNum = allJobs.length;\nlet allPredictionsNum = allPredictions.length;\nexport function getApplicantInfo(applicantID) {\n  for (let i = 0; i < allApplicantsNum; i++) {\n    let entry = allApplicants[i];\n\n    if (applicantID === entry[0]) {\n      return {\n        applicantID: applicantID,\n        applicantName: entry[1],\n        applicantFile: entry[2],\n        applicantStatus: entry[3],\n        applicantJob: entry[4]\n      };\n    }\n  }\n\n  return \"error\";\n}\nexport function getJobInfo(jobID) {\n  for (let i = 0; i < allJobsNum; i++) {\n    let entry = allJobs[i];\n\n    if (jobID === entry[0]) {\n      return {\n        jobID: entry[0],\n        jobTitle: entry[1],\n        jobMatchingDate: entry[2],\n        jobUpdateDate: entry[3],\n        recruiterID: entry[4],\n        hiringManagerID: entry[5],\n        jobDescription: entry[6],\n        jobRequirements: entry[7]\n      };\n    }\n  }\n\n  return \"error\";\n}\nexport function getPredictionInfo(applicantID, jobID) {\n  for (let i = 0; i < allPredictionsNum; i++) {\n    let entry = allPredictions[i];\n\n    if (applicantID === entry[2] && jobID === entry[3]) {\n      return {\n        predictinoID: entry[0],\n        predictionResult: entry[1],\n        applicantID: entry[2],\n        jobID: entry[3],\n        applicantEducation: entry[4],\n        applicantExperience: entry[5],\n        applicantSkills: entry[6]\n      };\n    }\n  }\n\n  return \"error\";\n}","map":{"version":3,"names":["allapplicants","alljobs","allpredictions","allApplicants","rows","allJobs","allPredictions","allApplicantsNum","length","allJobsNum","allPredictionsNum","getApplicantInfo","applicantID","i","entry","applicantName","applicantFile","applicantStatus","applicantJob","getJobInfo","jobID","jobTitle","jobMatchingDate","jobUpdateDate","recruiterID","hiringManagerID","jobDescription","jobRequirements","getPredictionInfo","predictinoID","predictionResult","applicantEducation","applicantExperience","applicantSkills"],"sources":["C:/Users/12500/Desktop/Capstone/capstone_24_schenker/capstone/src/pages/json/jsonUtil.js"],"sourcesContent":["import allapplicants from \"./all_applicants.json\"\r\nimport alljobs from \"./all_jobs.json\"\r\nimport allpredictions from \"./model_prediction.json\"\r\n\r\nlet allApplicants=allapplicants.rows;\r\nlet allJobs=alljobs.rows;\r\nlet allPredictions=allpredictions.rows;\r\n\r\nlet allApplicantsNum=allApplicants.length;\r\nlet allJobsNum=allJobs.length;\r\nlet allPredictionsNum=allPredictions.length;\r\n\r\nexport function getApplicantInfo(applicantID){\r\n    for (let i=0; i<allApplicantsNum; i++){\r\n        let entry= allApplicants[i];\r\n        if (applicantID===entry[0]){\r\n            return ({applicantID:applicantID, applicantName:entry[1], \r\n                applicantFile:entry[2], applicantStatus:entry[3], \r\n                applicantJob:entry[4]});\r\n            }\r\n        \r\n    }\r\n    return \"error\";\r\n}\r\n\r\nexport function getJobInfo(jobID){\r\n    for (let i=0; i<allJobsNum; i++){\r\n        let entry= allJobs[i];\r\n        if (jobID===entry[0]){\r\n            return ({jobID:entry[0], jobTitle:entry[1], \r\n                jobMatchingDate:entry[2], jobUpdateDate:entry[3], \r\n                recruiterID:entry[4], hiringManagerID:entry[5], jobDescription:entry[6], jobRequirements:entry[7]});\r\n                \r\n            }\r\n    }\r\n    return \"error\";\r\n}\r\n\r\nexport function getPredictionInfo(applicantID, jobID){\r\n    for (let i=0; i<allPredictionsNum; i++){\r\n        let entry= allPredictions[i];\r\n        if (applicantID===entry[2] && jobID===entry[3]){\r\n            return ({predictinoID:entry[0], predictionResult:entry[1], \r\n                applicantID:entry[2], jobID:entry[3], \r\n                applicantEducation:entry[4], applicantExperience:entry[5], applicantSkills:entry[6]});\r\n        }\r\n    }\r\n    return \"error\";\r\n}"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,uBAA1B;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AAEA,IAAIC,aAAa,GAACH,aAAa,CAACI,IAAhC;AACA,IAAIC,OAAO,GAACJ,OAAO,CAACG,IAApB;AACA,IAAIE,cAAc,GAACJ,cAAc,CAACE,IAAlC;AAEA,IAAIG,gBAAgB,GAACJ,aAAa,CAACK,MAAnC;AACA,IAAIC,UAAU,GAACJ,OAAO,CAACG,MAAvB;AACA,IAAIE,iBAAiB,GAACJ,cAAc,CAACE,MAArC;AAEA,OAAO,SAASG,gBAAT,CAA0BC,WAA1B,EAAsC;EACzC,KAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACN,gBAAhB,EAAkCM,CAAC,EAAnC,EAAsC;IAClC,IAAIC,KAAK,GAAEX,aAAa,CAACU,CAAD,CAAxB;;IACA,IAAID,WAAW,KAAGE,KAAK,CAAC,CAAD,CAAvB,EAA2B;MACvB,OAAQ;QAACF,WAAW,EAACA,WAAb;QAA0BG,aAAa,EAACD,KAAK,CAAC,CAAD,CAA7C;QACJE,aAAa,EAACF,KAAK,CAAC,CAAD,CADf;QACoBG,eAAe,EAACH,KAAK,CAAC,CAAD,CADzC;QAEJI,YAAY,EAACJ,KAAK,CAAC,CAAD;MAFd,CAAR;IAGC;EAER;;EACD,OAAO,OAAP;AACH;AAED,OAAO,SAASK,UAAT,CAAoBC,KAApB,EAA0B;EAC7B,KAAK,IAAIP,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACJ,UAAhB,EAA4BI,CAAC,EAA7B,EAAgC;IAC5B,IAAIC,KAAK,GAAET,OAAO,CAACQ,CAAD,CAAlB;;IACA,IAAIO,KAAK,KAAGN,KAAK,CAAC,CAAD,CAAjB,EAAqB;MACjB,OAAQ;QAACM,KAAK,EAACN,KAAK,CAAC,CAAD,CAAZ;QAAiBO,QAAQ,EAACP,KAAK,CAAC,CAAD,CAA/B;QACJQ,eAAe,EAACR,KAAK,CAAC,CAAD,CADjB;QACsBS,aAAa,EAACT,KAAK,CAAC,CAAD,CADzC;QAEJU,WAAW,EAACV,KAAK,CAAC,CAAD,CAFb;QAEkBW,eAAe,EAACX,KAAK,CAAC,CAAD,CAFvC;QAE4CY,cAAc,EAACZ,KAAK,CAAC,CAAD,CAFhE;QAEqEa,eAAe,EAACb,KAAK,CAAC,CAAD;MAF1F,CAAR;IAIC;EACR;;EACD,OAAO,OAAP;AACH;AAED,OAAO,SAASc,iBAAT,CAA2BhB,WAA3B,EAAwCQ,KAAxC,EAA8C;EACjD,KAAK,IAAIP,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACH,iBAAhB,EAAmCG,CAAC,EAApC,EAAuC;IACnC,IAAIC,KAAK,GAAER,cAAc,CAACO,CAAD,CAAzB;;IACA,IAAID,WAAW,KAAGE,KAAK,CAAC,CAAD,CAAnB,IAA0BM,KAAK,KAAGN,KAAK,CAAC,CAAD,CAA3C,EAA+C;MAC3C,OAAQ;QAACe,YAAY,EAACf,KAAK,CAAC,CAAD,CAAnB;QAAwBgB,gBAAgB,EAAChB,KAAK,CAAC,CAAD,CAA9C;QACJF,WAAW,EAACE,KAAK,CAAC,CAAD,CADb;QACkBM,KAAK,EAACN,KAAK,CAAC,CAAD,CAD7B;QAEJiB,kBAAkB,EAACjB,KAAK,CAAC,CAAD,CAFpB;QAEyBkB,mBAAmB,EAAClB,KAAK,CAAC,CAAD,CAFlD;QAEuDmB,eAAe,EAACnB,KAAK,CAAC,CAAD;MAF5E,CAAR;IAGH;EACJ;;EACD,OAAO,OAAP;AACH"},"metadata":{},"sourceType":"module"}