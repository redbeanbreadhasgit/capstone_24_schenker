{"ast":null,"code":"import allapplicants from \"./applicant.json\";\nimport alljobs from \"./matchedjob.json\";\nimport allpredictions from \"./modelprediction.json\";\nimport allusers from \"./user.json\";\nimport allapplicanthistory from \"./applicanthistory.json\";\nlet allApplicants = allapplicants.rows;\nlet allJobs = alljobs.rows;\nlet allPredictions = allpredictions.rows;\nlet allUsers = allusers.rows;\nlet allApplicantHistory = allapplicanthistory.rows;\nlet allApplicantsNum = allApplicants.length;\nlet allJobsNum = allJobs.length;\nlet allPredictionsNum = allPredictions.length;\nlet allUsersNum = allUsers.length;\nlet allApplicantHistoryNum = allApplicantHistory.length;\nexport function getApplicantsNum() {\n  return allApplicantsNum;\n}\nexport function getJobsNum() {\n  return allJobsNum;\n}\nexport function getPredictionsNum() {\n  return allPredictionsNum;\n}\nexport function getUsersNum() {\n  return allUsersNum;\n}\nexport function getApplicantHistoryNum() {\n  return allApplicantHistoryNum;\n}\nexport function getApplicantInfo(applicantID) {\n  let applicantIDInt = parseInt(applicantID);\n\n  for (let i = 0; i < allApplicantsNum; i++) {\n    let entry = allApplicants[i];\n\n    if (applicantIDInt == entry[0]) {\n      return {\n        applicantID: applicantID,\n        applicantResume: entry[1],\n        applicantName: entry[2],\n        applicantAppliedJobID: entry[3],\n        reprofile: entry[4],\n        reprofileID: entry[5],\n        pendingStatus: entry[6]\n      };\n    }\n  }\n\n  return \"error\";\n}\nexport function getJobInfo(jobID) {\n  let jobIDInt = parseInt(jobID);\n\n  for (let i = 0; i < allJobsNum; i++) {\n    let entry = allJobs[i];\n\n    if (jobIDInt === entry[0]) {\n      return {\n        jobID: entry[0],\n        jobTitle: entry[1],\n        jobMatchingDate: entry[2],\n        jobUpdateDate: entry[3],\n        recruiterID: entry[4],\n        jobDescription: entry[5],\n        jobKeywords: entry[6],\n        jobStatus: entry[7]\n      };\n    }\n  }\n\n  return \"error\";\n}\nexport function getPredictionInfo(applicantID, jobID) {\n  let applicantIDInt = parseInt(applicantID);\n  let jobIDInt = parseInt(jobID);\n\n  for (let i = 0; i < allPredictionsNum; i++) {\n    let entry = allPredictions[i];\n\n    if (applicantIDInt === entry[2] && jobIDInt === entry[3]) {\n      return {\n        predictionID: entry[0],\n        predictionResult: entry[1],\n        applicantID: entry[2],\n        jobID: entry[3],\n        applicantSkills: entry[4]\n      };\n    }\n  }\n\n  return \"error\";\n}\nexport function getAllPredictionInfo(applicantID) {\n  let applicantIDInt = parseInt(applicantID);\n  let result = []; // let jobIDInt=parseInt(jobID);\n\n  for (let i = 0; i < allPredictionsNum; i++) {\n    let entry = allPredictions[i];\n\n    if (applicantIDInt === entry[2]) {\n      result.push({\n        predictionID: entry[0],\n        predictionResult: entry[1],\n        applicantID: entry[2],\n        jobID: entry[3],\n        applicantSkills: entry[4]\n      });\n    }\n  }\n\n  if (result.length === 0) {\n    return \"error\";\n  } else {\n    return result;\n  }\n}\nexport function getApplicantHistoryInfo(applicantID) {\n  let result = [];\n  let applicantIDInt = parseInt(applicantID);\n\n  for (let i = 0; i < allApplicantHistoryNum; i++) {\n    let entry = allApplicantHistory[i];\n\n    if (applicantIDInt === entry[2]) {\n      result.push({\n        historyID: entry[0],\n        pendingStatus: entry[1],\n        applicantID: entry[2],\n        jobID: entry[3],\n        recruiterID: entry[4],\n        statusChangeDate: entry[5]\n      });\n    }\n  }\n\n  if (result.length === 0) {\n    return \"none of history\";\n  } else {\n    return result;\n  }\n}\nexport function getUserInfo(userID) {\n  let userIDInt = parseInt(userID);\n\n  for (let i = 0; i < allUsersNum; i++) {\n    let entry = allUsers[i];\n\n    if (userIDInt === entry[0]) {\n      return {\n        userID: entry[0],\n        userName: entry[1],\n        firstName: entry[2],\n        lastName: entry[3],\n        password: entry[4],\n        lastLogin: entry[5],\n        isSuperUser: entry[6],\n        email: entry[7],\n        isStaff: entry[8],\n        isActive: entry[9],\n        dateJoined: entry[10]\n      };\n    }\n  }\n\n  return \"error\";\n} // this is only for applicant page - detailed\n\nexport function getAppliedApplicants(jobID) {\n  let result = [];\n  let jobIDInt = parseInt(jobID);\n\n  for (let i = 1; i <= allApplicantsNum; i++) {\n    let appliedJobID = parseInt(getApplicantInfo(i).applicantAppliedJobID);\n\n    if (appliedJobID === jobIDInt) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"names":["allapplicants","alljobs","allpredictions","allusers","allapplicanthistory","allApplicants","rows","allJobs","allPredictions","allUsers","allApplicantHistory","allApplicantsNum","length","allJobsNum","allPredictionsNum","allUsersNum","allApplicantHistoryNum","getApplicantsNum","getJobsNum","getPredictionsNum","getUsersNum","getApplicantHistoryNum","getApplicantInfo","applicantID","applicantIDInt","parseInt","i","entry","applicantResume","applicantName","applicantAppliedJobID","reprofile","reprofileID","pendingStatus","getJobInfo","jobID","jobIDInt","jobTitle","jobMatchingDate","jobUpdateDate","recruiterID","jobDescription","jobKeywords","jobStatus","getPredictionInfo","predictionID","predictionResult","applicantSkills","getAllPredictionInfo","result","push","getApplicantHistoryInfo","historyID","statusChangeDate","getUserInfo","userID","userIDInt","userName","firstName","lastName","password","lastLogin","isSuperUser","email","isStaff","isActive","dateJoined","getAppliedApplicants","appliedJobID"],"sources":["C:/Users/12500/Desktop/Capstone/capstone_24_schenker/capstone/src/pages/jsonver3/jsonUtil.js"],"sourcesContent":["import allapplicants from \"./applicant.json\"\r\nimport alljobs from \"./matchedjob.json\"\r\nimport allpredictions from \"./modelprediction.json\"\r\nimport allusers from \"./user.json\"\r\nimport allapplicanthistory from \"./applicanthistory.json\"\r\n\r\n\r\nlet allApplicants=allapplicants.rows;\r\nlet allJobs=alljobs.rows;\r\nlet allPredictions=allpredictions.rows;\r\nlet allUsers=allusers.rows;\r\nlet allApplicantHistory=allapplicanthistory.rows;\r\n\r\n\r\nlet allApplicantsNum=allApplicants.length;\r\nlet allJobsNum=allJobs.length;\r\nlet allPredictionsNum=allPredictions.length;\r\nlet allUsersNum=allUsers.length;\r\nlet allApplicantHistoryNum=allApplicantHistory.length;\r\n\r\nexport function getApplicantsNum(){\r\n    return allApplicantsNum;\r\n}\r\n\r\nexport function getJobsNum(){\r\n    return allJobsNum;\r\n}\r\n\r\nexport function getPredictionsNum(){\r\n    return allPredictionsNum;\r\n}\r\n\r\nexport function getUsersNum(){\r\n    return allUsersNum;\r\n}\r\n\r\nexport function getApplicantHistoryNum(){\r\n    return allApplicantHistoryNum;\r\n}\r\n\r\nexport function getApplicantInfo(applicantID){\r\n    let applicantIDInt=parseInt(applicantID);\r\n    for (let i=0; i<allApplicantsNum; i++){\r\n        let entry= allApplicants[i];\r\n        if (applicantIDInt==entry[0]){\r\n            return ({applicantID:applicantID, applicantResume:entry[1], applicantName:entry[2], \r\n                    applicantAppliedJobID:entry[3], reprofile:entry[4],\r\n                    reprofileID:entry[5], pendingStatus:entry[6]});\r\n            }\r\n        \r\n    }\r\n    return \"error\";\r\n}\r\n\r\nexport function getJobInfo(jobID){\r\n    let jobIDInt=parseInt(jobID);\r\n    for (let i=0; i<allJobsNum; i++){\r\n        let entry= allJobs[i];\r\n        if (jobIDInt===entry[0]){\r\n            return ({jobID:entry[0], jobTitle:entry[1], \r\n                jobMatchingDate:entry[2], jobUpdateDate:entry[3], \r\n                recruiterID:entry[4], jobDescription:entry[5], \r\n                jobKeywords:entry[6], jobStatus:entry[7]});                \r\n            }\r\n    }\r\n    return \"error\";\r\n}\r\n\r\nexport function getPredictionInfo(applicantID, jobID){\r\n    let applicantIDInt=parseInt(applicantID);\r\n    let jobIDInt=parseInt(jobID);\r\n    for (let i=0; i<allPredictionsNum; i++){\r\n        let entry= allPredictions[i];\r\n        if (applicantIDInt===entry[2] && jobIDInt===entry[3]){\r\n            return ({predictionID:entry[0], predictionResult:entry[1], \r\n                applicantID:entry[2], jobID:entry[3], \r\n                applicantSkills:entry[4]});\r\n        }\r\n    }\r\n    return \"error\";\r\n}\r\n\r\nexport function getAllPredictionInfo(applicantID){\r\n    let applicantIDInt=parseInt(applicantID);\r\n    let result=[];\r\n    // let jobIDInt=parseInt(jobID);\r\n    for (let i=0; i<allPredictionsNum; i++){\r\n        let entry= allPredictions[i];\r\n        if (applicantIDInt===entry[2] ){\r\n            result.push({predictionID:entry[0], predictionResult:entry[1], \r\n                applicantID:entry[2], jobID:entry[3], \r\n                applicantSkills:entry[4]});\r\n        }\r\n    }\r\n    if (result.length===0){\r\n        return \"error\";\r\n    }\r\n    else{\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function getApplicantHistoryInfo(applicantID){\r\n    let result=[];\r\n    let applicantIDInt=parseInt(applicantID)\r\n    \r\n    for (let i=0; i<allApplicantHistoryNum; i++){\r\n        let entry=allApplicantHistory[i];\r\n        if (applicantIDInt===entry[2]){\r\n            result.push({historyID:entry[0], pendingStatus:entry[1]\r\n                , applicantID:entry[2], jobID:entry[3]\r\n                , recruiterID:entry[4], statusChangeDate: entry[5], })\r\n        }\r\n    }\r\n    if (result.length===0){\r\n        return \"none of history\";\r\n    }else{\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nexport function getUserInfo(userID){\r\n    let userIDInt=parseInt(userID);\r\n    for (let i=0; i<allUsersNum; i++){\r\n        let entry=allUsers[i]\r\n        if (userIDInt===entry[0]){\r\n            return ({userID: entry[0], userName: entry[1], firstName: entry[2], lastName: entry[3],\r\n            password: entry[4], lastLogin: entry[5], isSuperUser: entry[6], email: entry[7],\r\n            isStaff: entry[8], isActive: entry[9], dateJoined: entry[10]})\r\n        }\r\n    }\r\n    return \"error\";\r\n}\r\n\r\n// this is only for applicant page - detailed\r\nexport function getAppliedApplicants(jobID){\r\n    let result=[];\r\n    let jobIDInt=parseInt(jobID);\r\n    \r\n    for (let i=1; i<=allApplicantsNum; i++){\r\n        let appliedJobID=parseInt(getApplicantInfo(i).applicantAppliedJobID);\r\n        if (appliedJobID===jobIDInt){\r\n            result.push(i);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}