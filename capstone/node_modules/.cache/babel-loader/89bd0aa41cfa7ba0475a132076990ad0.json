{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\12500\\\\Desktop\\\\Capstone\\\\capstone_24_schenker\\\\capstone\\\\src\\\\pages\\\\dashboard-applicantList-detailed\\\\GetApplicantInfo.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useParams } from \"react-router-dom\";\nimport { getApplicantInfo, getJobInfo, getPredictionInfo, getAllPredictionInfo } from \"../jsonver3/jsonUtil\";\nimport { Tab, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\nimport { Box } from '@material-ui/core';\nimport Title from \"../components/Title\";\nimport { Select } from \"@material-ui/core\";\nimport { EnhancedTableHead, getComparator, stableSort } from \"../components/enhancedTable\";\nimport { tableStyle } from \"../styles/tableStyle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ReturnApplicantInfo() {\n  _s();\n\n  let params = useParams();\n  let applicantID = parseInt(params.applicantID.substring(1), 10);\n  let applicantSelected = getApplicantInfo(applicantID);\n  let jobSelected = getJobInfo(parseInt(applicantSelected.applicantAppliedJobID));\n  let predictionSelected = getPredictionInfo(applicantID, parseInt(applicantSelected.applicantJob));\n  let AllPredictionInfoTable = getAllPredictionInfo(applicantID);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        fontWeight: \"fontWeightBold\",\n        children: [\"Applicant Applied Job: \", jobSelected.jobTitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        fontWeight: \"fontWeightBold\",\n        children: \"Current Reprofiled Job: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        fontWeight: \"fontWeightBold\",\n        children: [\"Applicant Status:  \", applicantSelected.pendingStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ReturnApplicantInfo, \"+jVsTcECDRo3yq2d7EQxlN9Ixog=\", false, function () {\n  return [useParams];\n});\n\n_c = ReturnApplicantInfo;\nexport function ReturnApplicantInfoTable() {\n  _s2();\n\n  let params = useParams();\n  let applicantID = parseInt(params.applicantID.substring(1), 10);\n  let applicantSelected = getApplicantInfo(applicantID);\n  let jobSelected = getJobInfo(parseInt(applicantSelected.applicantJob));\n  let predictionSelected = getPredictionInfo(applicantID, parseInt(applicantSelected.applicantJob));\n  let AllPredictionInfoTable = getAllPredictionInfo(applicantID);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Job Matching Results:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        children: \"Job Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: \"% Suitability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: \"Rank in Job\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: \"Applicant Job Skills\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n      children: AllPredictionInfoTable.map(each => /*#__PURE__*/_jsxDEV(TableRow, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          children: getJobInfo(each.jobID).jobTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: each.predictionResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: each.Rank\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: each.applicantSkills\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ReturnApplicantInfoTable, \"+jVsTcECDRo3yq2d7EQxlN9Ixog=\", false, function () {\n  return [useParams];\n});\n\n_c2 = ReturnApplicantInfoTable;\nexport function ReturnApplicantName() {\n  _s3();\n\n  let params = useParams();\n  let applicantID = params.applicantID;\n  let applicantSelected = getApplicantInfo(parseInt(applicantID.substring(1), 10));\n  return applicantSelected.applicantName;\n}\n\n_s3(ReturnApplicantName, \"+jVsTcECDRo3yq2d7EQxlN9Ixog=\", false, function () {\n  return [useParams];\n});\n\n_c3 = ReturnApplicantName;\nexport function Reprofile() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Update Applicant Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        children: \"Recruiter Decision\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: \"Or\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: \"If profiling, select job:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n      children: /*#__PURE__*/_jsxDEV(TableRow, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          children: /*#__PURE__*/_jsxDEV(Select, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: /*#__PURE__*/_jsxDEV(Select, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 9\n  }, this);\n}\n_c4 = Reprofile;\nexport function ReturnApplicantHistory() {\n  _s4();\n\n  const classes = tableStyle();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"jobTitle\");\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\"; // switch between the 2 orders\n\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  }; // read raw data from databsse\n\n\n  function createTable() {\n    let table = [];\n\n    for (let i = 1; i <= getApplicantsNum(); i++) {\n      table.push(getApplicantInfo(i));\n    }\n\n    return table;\n  } // generated processed data\n\n\n  function createEnhancedData(applicantID, applicantName, applicantAppliedRole, suitability, applicantStatus, date) {\n    return {\n      applicantID,\n      applicantName,\n      applicantAppliedRole,\n      suitability,\n      applicantStatus,\n      date\n    };\n  } // generated table from processed data\n\n\n  function createEnhancedTableBody() {\n    let table = createTable();\n    let enhancedTableBody = [];\n    table.map(each => enhancedTableBody.push(createEnhancedData(each.applicantID, each.applicantName, getJobInfo(each.applicantAppliedJobID).jobTitle, getPredictionInfo(each.applicantID, each.applicantAppliedJobID).predictionResult, each.pendingStatus, \"null\")));\n    return enhancedTableBody;\n  }\n\n  let params = useParams();\n  let applicantID = parseInt(params.applicantID.substring(1), 10);\n  let applicantSelected = getApplicantInfo(applicantID);\n  const tableHead = [{\n    id: \"jobTitle\",\n    label: \"Job Title\"\n  }, {\n    id: \"status\",\n    label: \"Job Status\"\n  }, {\n    id: \"applicantAppliedDate\",\n    label: \"Date\"\n  }, {\n    id: \"recruiter\",\n    label: \"Recruiter\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Title, {\n      children: \"Applicant History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 9\n  }, this);\n}\n\n_s4(ReturnApplicantHistory, \"NLD8dvEg7CAdLK2E8HJtzL9GrVo=\", false, function () {\n  return [useParams];\n});\n\n_c5 = ReturnApplicantHistory;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ReturnApplicantInfo\");\n$RefreshReg$(_c2, \"ReturnApplicantInfoTable\");\n$RefreshReg$(_c3, \"ReturnApplicantName\");\n$RefreshReg$(_c4, \"Reprofile\");\n$RefreshReg$(_c5, \"ReturnApplicantHistory\");","map":{"version":3,"names":["useParams","getApplicantInfo","getJobInfo","getPredictionInfo","getAllPredictionInfo","Tab","TableBody","TableCell","TableHead","TableRow","Typography","Box","Title","Select","EnhancedTableHead","getComparator","stableSort","tableStyle","ReturnApplicantInfo","params","applicantID","parseInt","substring","applicantSelected","jobSelected","applicantAppliedJobID","predictionSelected","applicantJob","AllPredictionInfoTable","jobTitle","pendingStatus","ReturnApplicantInfoTable","map","each","jobID","predictionResult","Rank","applicantSkills","ReturnApplicantName","applicantName","Reprofile","ReturnApplicantHistory","classes","order","setOrder","React","useState","orderBy","setOrderBy","handleRequestSort","event","property","isAsc","createTable","table","i","getApplicantsNum","push","createEnhancedData","applicantAppliedRole","suitability","applicantStatus","date","createEnhancedTableBody","enhancedTableBody","tableHead","id","label"],"sources":["C:/Users/12500/Desktop/Capstone/capstone_24_schenker/capstone/src/pages/dashboard-applicantList-detailed/GetApplicantInfo.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport {getApplicantInfo, getJobInfo, getPredictionInfo, getAllPredictionInfo} from \"../jsonver3/jsonUtil\";\r\nimport { Tab, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\r\nimport {Box} from '@material-ui/core';\r\nimport Title from \"../components/Title\";\r\nimport {Select} from \"@material-ui/core\";\r\n\r\nimport {EnhancedTableHead, getComparator, stableSort, } from \"../components/enhancedTable\";\r\nimport {tableStyle} from \"../styles/tableStyle\";\r\n\r\nexport function ReturnApplicantInfo(){\r\n    let params=useParams();\r\n    let applicantID=parseInt(params.applicantID.substring(1,),10);\r\n    let applicantSelected=getApplicantInfo(applicantID);\r\n    let jobSelected=getJobInfo(parseInt(applicantSelected.applicantAppliedJobID));\r\n    let predictionSelected=getPredictionInfo(applicantID,parseInt(applicantSelected.applicantJob));\r\n    let AllPredictionInfoTable=getAllPredictionInfo(applicantID);\r\n    \r\n    \r\n    \r\n    return (\r\n        <div>\r\n            {/* <Typography variant=\"h5\" >Selected Applicant : applicantID {applicantID}</Typography> */}\r\n            {/* <Typography>\r\n                <Box fontWeight=\"fontWeightRegular\" > \r\n                    Selected Applicant Infomation :\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                    Applicant ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\" > \r\n                    {applicantSelected.applicantID}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Name : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\" > \r\n                {applicantSelected.applicantName}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant File : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {applicantSelected.applicantFile} \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Status : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {applicantSelected.applicantStatus}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Applied Job ID: \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {applicantSelected.applicantJob}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Title : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobTitle}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Matching date : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobMatchingDate}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Update Date : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobUpdateDate}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Recruiter ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.recruiterID}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Hiring Manager ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.hiringManagerID}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Description :  \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobDescription}\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Job Requirments : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {jobSelected.jobRequirements}\r\n                </Box> \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Prediction ID : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.predictionID}\r\n                </Box>  \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Prediction Result (%) : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.predictionResult*100} %\r\n                </Box>\r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Education Level : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.applicantEducation}\r\n                </Box>          \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Applicant Experience : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.applicantExperience}\r\n                </Box>  \r\n                <Box fontWeight=\"fontWeightBold\" > \r\n                Prediction Skills : \r\n                </Box>\r\n                <Box fontWeight=\"fontWeightRegular\" fontStyle=\"italic\"> \r\n                {predictionSelected.applicantSkills}\r\n                </Box>\r\n            </Typography> */}\r\n        \r\n            <Typography>\r\n                <Box fontWeight={\"fontWeightBold\"}>\r\n                    Applicant Applied Job: {jobSelected.jobTitle}\r\n                </Box>\r\n                <Box fontWeight={\"fontWeightBold\"}>\r\n                    Current Reprofiled Job: {}\r\n                </Box>\r\n                <Box fontWeight={\"fontWeightBold\"}>\r\n                    Applicant Status:  {applicantSelected.pendingStatus}\r\n                </Box>\r\n                \r\n            </Typography>\r\n            \r\n        </div>\r\n    );     \r\n}\r\n\r\nexport function ReturnApplicantInfoTable(){\r\n    let params=useParams();\r\n    let applicantID=parseInt(params.applicantID.substring(1,),10);\r\n    let applicantSelected=getApplicantInfo(applicantID);\r\n    let jobSelected=getJobInfo(parseInt(applicantSelected.applicantJob));\r\n    let predictionSelected=getPredictionInfo(applicantID,parseInt(applicantSelected.applicantJob));\r\n    let AllPredictionInfoTable=getAllPredictionInfo(applicantID);\r\n\r\n\r\n    \r\n    return(\r\n        <div>\r\n            <Title>\r\n                Job Matching Results:\r\n            </Title>\r\n            <TableHead>\r\n                <TableCell>Job Name</TableCell>\r\n                <TableCell>% Suitability</TableCell>\r\n                <TableCell>Rank in Job</TableCell>\r\n                <TableCell>Applicant Job Skills</TableCell>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    AllPredictionInfoTable.map(each =>(\r\n                        <TableRow>\r\n                            <TableCell>{getJobInfo(each.jobID).jobTitle}</TableCell>\r\n                            <TableCell>{each.predictionResult}</TableCell>\r\n                            <TableCell>{each.Rank}</TableCell>\r\n                            <TableCell>{each.applicantSkills}</TableCell>\r\n                        </TableRow>\r\n                    ))\r\n                }\r\n            </TableBody>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function ReturnApplicantName(){\r\n    let params=useParams();\r\n    let applicantID=params.applicantID;\r\n    let applicantSelected=getApplicantInfo(parseInt(applicantID.substring(1,),10));\r\n    return applicantSelected.applicantName;\r\n}\r\n\r\nexport function Reprofile(){\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Title>Update Applicant Status</Title>\r\n            <TableHead>\r\n                <TableCell>Recruiter Decision</TableCell>\r\n                <TableCell>Or</TableCell>\r\n                <TableCell>If profiling, select job:</TableCell>\r\n            </TableHead>\r\n            <TableBody>\r\n                <TableRow>\r\n                    <TableCell><Select></Select></TableCell>\r\n                    <TableCell></TableCell>\r\n                    <TableCell><Select></Select></TableCell>\r\n                </TableRow>\r\n            </TableBody>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport function ReturnApplicantHistory(){\r\n\r\n    const classes = tableStyle();\r\n    const [order, setOrder] = React.useState(\"asc\");\r\n    const [orderBy, setOrderBy] = React.useState(\"jobTitle\");\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === \"asc\";\r\n        // switch between the 2 orders\r\n        setOrder(isAsc ? \"desc\" : \"asc\");\r\n        setOrderBy(property);\r\n    }\r\n\r\n    // read raw data from databsse\r\n    function createTable(){\r\n        let table=[];\r\n        for (let i=1; i<=getApplicantsNum(); i++){\r\n        table.push(getApplicantInfo(i));\r\n        }\r\n        return table;\r\n    }\r\n    \r\n    // generated processed data\r\n    function createEnhancedData(applicantID, applicantName, applicantAppliedRole, suitability, applicantStatus, date) {\r\n        return { applicantID, applicantName, applicantAppliedRole, suitability, applicantStatus, date };\r\n    }\r\n    \r\n    // generated table from processed data\r\n    function createEnhancedTableBody(){\r\n        let table=createTable();\r\n        let enhancedTableBody=[];\r\n        table.map ((each) => enhancedTableBody.push(createEnhancedData(\r\n        each.applicantID, \r\n        each.applicantName,\r\n        getJobInfo(each.applicantAppliedJobID).jobTitle,\r\n        getPredictionInfo(each.applicantID,each.applicantAppliedJobID).predictionResult,\r\n        each.pendingStatus,\r\n        \"null\",\r\n        )));\r\n        return enhancedTableBody;\r\n    }\r\n\r\n    let params=useParams();\r\n    let applicantID=parseInt(params.applicantID.substring(1,),10);\r\n    let applicantSelected=getApplicantInfo(applicantID);\r\n\r\n    const tableHead=[\r\n        {\r\n            id:\"jobTitle\",\r\n            label:\"Job Title\",\r\n        },\r\n        {\r\n            id:\"status\",\r\n            label:\"Job Status\",\r\n        },\r\n        {\r\n            id:\"applicantAppliedDate\",\r\n            label:\"Date\",\r\n        },\r\n        {\r\n            id:\"recruiter\",\r\n            label:\"Recruiter\",\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Title>\r\n                Applicant History\r\n            </Title>\r\n            {/* <Table\r\n                className={classes.table}\r\n                aria-labelledby=\"tableTitle\"\r\n                aria-label=\"enhanced table\"\r\n            >\r\n                <EnhancedTableHead\r\n                classes={classes}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onRequestSort={handleRequestSort}\r\n                tableHeadCells={tableHead}\r\n                />\r\n                <TableBody>\r\n                {stableSort(createEnhancedTableBody(), getComparator(order, orderBy))\r\n                \r\n                    .map((each, index) => {\r\n\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                    return (\r\n                        <TableRow >\r\n                                   \r\n                        <TableCell>\r\n                            <Link component={routerLink} to={`/applicantList:${each.applicantID}` }>\r\n                            {each.applicantName}\r\n                            </Link>\r\n                        </TableCell>\r\n                        <TableCell>{each.applicantAppliedRole}</TableCell>\r\n                        <TableCell align='right'>{each.suitability}</TableCell>\r\n                        <TableCell>{each.applicantStatus}</TableCell>\r\n                        <TableCell>{each.date}</TableCell>\r\n                       \r\n                        </TableRow>\r\n                    );\r\n                    })}\r\n                </TableBody>\r\n            </Table> */}\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}